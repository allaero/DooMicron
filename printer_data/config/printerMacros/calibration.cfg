####################################################################################################
########################################## CALIBRATION #############################################
####################################################################################################

####################################################################################################
######################################### HOMING OVERRIDE ##########################################
####################################################################################################
[homing_override]
axes: xyz
set_position_z: 0
gcode:
    # Variable collection and initialization
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set macrocfg = printer["gcode_macro _macroVariables"] %}
    {% set z_hop_distance = macrocfg.z_hop_distance | float %}
    {% set first_homed_axis = macrocfg.first_homed_axis | string %}
    {% set safe_x = macrocfg.home_x | float %}
    {% set safe_y = macrocfg.home_y | float %}
    {% set safe_z_enabled = macrocfg.safe_z_enabled | abs %}

    # Calculate clean speed variables first
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed) * 1000 | float %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    # Probe detection and configuration
    {% if printer.configfile.settings.beacon is defined %}
        {% set probe_name = printer.configfile.settings.beacon %}
    {% elif printer.configfile.settings.probe is defined %}
        {% set probe_name = printer.configfile.settings.probe %}
    {% elif printer.configfile.settings.dockable_probe is defined %}
        {% set probe_name = printer.configfile.settings.dockable_probe %}
    {% elif printer.configfile.settings.bltouch is defined %}
        {% set probe_name = printer.configfile.settings.bltouch %}
    {% else %}
        {% set probe_name = None %}
    {% endif %}

    # Calculate probe offset for Z homing
    {% if 'probe' in printer.configfile.settings.stepper_z.endstop_pin %}
        {% set probe_x_offset = probe_name.x_offset | float %}
        {% set probe_y_offset = probe_name.y_offset | float %}
    {% else %}
        {% set probe_x_offset = 0 | float %}
        {% set probe_y_offset = 0 | float %}
    {% endif %}

    # Safe position calculations with probe offset compensation
    {% if safe_x == -128 %}
        {% set safe_x = (printer.configfile.settings.stepper_x.position_max) / 2 %}
    {% endif %}
    {% if probe_x_offset < 0 %}
        {% set safe_x = safe_x + probe_x_offset %}
    {% elif probe_x_offset > 0 %}
        {% set safe_x = safe_x - probe_x_offset %}
    {% endif %}

    {% if safe_y == -128 %}
        {% set safe_y = (printer.configfile.settings.stepper_y.position_max) / 2 %}
    {% endif %}
    {% if probe_y_offset < 0 %}
        {% set safe_y = safe_y + probe_y_offset %}
    {% elif probe_y_offset > 0 %}
        {% set safe_y = safe_y - probe_y_offset %}
    {% endif %}

    # Pre-homing Z lift for safety
    {% if z_hop_distance > 0 %}
        {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}
            G0 Z{z_hop_distance} F{z_hop_speed}
        {% endif %}
    {% endif %}
    
    # LED status indication
    _SET_LED_STATUS STATUS=calibrating

    # Axis homing sequence based on configured first axis
    {% if first_homed_axis == 'X' %}
        {% if home_all or 'X' in params %}
            _HOME_X
        {% endif %}
        {% if home_all or 'Y' in params %}
            _HOME_Y
        {% endif %}
    {% endif %}

    {% if first_homed_axis == 'Y' %}
        {% if home_all or 'Y' in params %}
            _HOME_Y
        {% endif %}
        {% if home_all or 'X' in params %}
            _HOME_X
        {% endif %}
    {% endif %}

    _SET_LED_STATUS STATUS=calibrating

    # Z-axis homing with safe positioning
    {% if safe_z_enabled == True and (home_all or 'Z' in params) %}
        G0 X{safe_x} Y{safe_y} F{travel_speed}
    {% endif %}

    {% if home_all or 'Z' in params %}
        G28 Z
        G0 Z{z_hop_distance} F{z_hop_speed}
    {% endif %}

    M400
    
    # Return to standby status
    _SET_LED_STATUS STATUS=standby


####################################################################################################
######################################### INDIVIDUAL AXIS HOMING ###################################
####################################################################################################
[gcode_macro _HOME_X]
description: Home X-axis with sensorless stallguard detection
gcode:
    # Variable initialization
    {% set macrocfg = printer["gcode_macro _macroVariables"] %}
    {% set homing_current = macrocfg.home_current | float %}
    {% set backoff_distance = macrocfg.home_retract | float %}
    {% set clear_time = macrocfg.clear_time | float %}
    {% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}
    
    # Calculate clean speed variables
    {% set clear_time_ms = (clear_time * 1000) | float %}
    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed) * 60 | float %}

    # Homing current setup for sensorless detection
    {% if homing_current != 0.0 %}
        {% if 'y' not in printer.toolhead.homed_axes %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}
        {% elif 'x' in printer.toolhead.homed_axes %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}
        {% endif %}
    {% endif %}

    _SET_LED_STATUS STATUS=calibrating

    G4 P{clear_time_ms}                                         # Clear stallguard registers
    G28 X                                                       # Execute X-axis homing

    # Endstop backoff procedure
    {% if backoff_distance > 0 %}
        {% if positive_dir == True %}
            G91
            G0 X-{backoff_distance} F{homing_speed}
            G90
        {% else %}
            G91
            G0 X{backoff_distance} F{homing_speed}
            G90
        {% endif %}
    {% endif %}

    # Position correction for sensorless homing offset
    {% if positive_dir == True %}
        G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}
    {% else %}
        G0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}
    {% endif %}

    # Current restoration after homing
    {% if homing_current != 0.0 %}
        # Driver type detection for current restoration
        {% set driver_x = macrocfg.tmc_x %}
        {% set driver_y = macrocfg.tmc_y %}

        {% if 'y' in printer.toolhead.homed_axes %}
            {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}
            {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}
        {% endif %}
    {% endif %}

    _SET_LED_STATUS STATUS=standby


[gcode_macro _HOME_Y]
description: Home Y-axis with sensorless stallguard detection
gcode:
    # Variable initialization
    {% set macrocfg = printer["gcode_macro _macroVariables"] %}
    {% set homing_current = macrocfg.home_current | float %}
    {% set backoff_distance = macrocfg.home_retract | float %}
    {% set clear_time = macrocfg.clear_time | float %}
    {% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}
    
    # Calculate clean speed variables
    {% set clear_time_ms = (clear_time * 1000) | float %}
    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed) * 60 | float %}

    # Homing current setup for sensorless detection
    {% if homing_current != 0.0 %}
        {% if 'x' not in printer.toolhead.homed_axes %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}
        {% elif 'y' in printer.toolhead.homed_axes %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}
        {% endif %}
    {% endif %}

    _SET_LED_STATUS STATUS=calibrating

    G4 P{clear_time_ms}                                         # Clear stallguard registers
    G28 Y                                                       # Execute Y-axis homing

    # Endstop backoff procedure
    {% if backoff_distance > 0 %}
        {% if positive_dir == True %}
            G91
            G0 Y-{backoff_distance} F{homing_speed}
            G90
        {% else %}
            G91
            G0 Y{backoff_distance} F{homing_speed}
            G90
        {% endif %}
    {% endif %}

    # Position correction for sensorless homing offset
    {% if positive_dir == True %}
        G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}
    {% else %}
        G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}
    {% endif %}

    # Current restoration after homing
    {% if homing_current != 0.0 %}
        # Driver type detection for current restoration
        {% set driver_x = macrocfg.tmc_x %}
        {% set driver_y = macrocfg.tmc_y %}

        {% if 'x' in printer.toolhead.homed_axes %}
            {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}
            {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}
        {% endif %}
    {% endif %}

    G4 P{clear_time_ms}                                         # Final stallguard register clear

    _SET_LED_STATUS STATUS=standby


####################################################################################################
####################################### CONDITIONAL CALIBRATION ####################################
####################################################################################################
[gcode_macro _CG28]
description: Conditional homing - only homes axes that need it
variable_output: 118
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Parameter parsing for specific axes
    {% set X = True if "x" in rawparams|string|lower else False %}
    {% set Y = True if "y" in rawparams|string|lower else False %}
    {% set Z = True if "z" in rawparams|string|lower else False %}
    {% set ALL = True if rawparams|string|lower == "" else False %}
    
    {% if ALL %}
        {% set X, Y, Z = True, True, True %}
    {% endif %}

    # Check current homing status and determine what needs homing
    {% if printer.toolhead.homed_axes != "xyz" %}
        {% set home_x = True if "x" not in printer.toolhead.homed_axes else False %}
        {% set home_y = True if "y" not in printer.toolhead.homed_axes else False %}
        {% set home_z = True if "z" not in printer.toolhead.homed_axes else False %}

        # Execute homing based on requirements
        {% if home_x and home_y and home_z %}
            {% if ALL %}
                RESPOND MSG="Homing all axes"
                G28
            {% else %}
                {% if X and home_x %}
                    RESPOND MSG="Homing X-axis"
                    G28 X
                {% endif %}
                {% if Y and home_y %}
                    RESPOND MSG="Homing Y-axis"
                    G28 Y
                {% endif %}
                {% if Z and home_z %}
                    _SET_LED_STATUS STATUS=calibrating
                    RESPOND MSG="Homing Z-axis"
                    G28 Z
                {% endif %}
            {% endif %}
        {% else %}
            {% if home_x and X %}
                RESPOND MSG="Homing X-axis"
                G28 X
            {% endif %}
            {% if home_y and Y %}
                RESPOND MSG="Homing Y-axis"
                G28 Y
            {% endif %}
            {% if home_z and Z %}
                _SET_LED_STATUS STATUS=calibrating
                RESPOND MSG="Homing Z-axis"
                G28 Z
            {% endif %}
        {% endif %}
    {% else %}
        RESPOND MSG="✅ Axes already homed"
    {% endif %}

    _SET_LED_STATUS STATUS=standby


[gcode_macro _CQGL]
description: Conditional quad gantry leveling - only runs if needed
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        _SET_LED_STATUS STATUS=calibrating
     
        _CG28
        QUAD_GANTRY_LEVEL
        
        _SET_LED_STATUS STATUS=calibrating
        G28 Z
        
        _SET_LED_STATUS STATUS=standby
    {% endif %}

####################################################################################################
##################################### QUAD GANTRY LEVELING #########################################
####################################################################################################

[gcode_macro QUAD_GANTRY_LEVEL]
description: Quad gantry leveling with auto-centering
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Calculate clean variables first
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
    {% set travel_speed = macrocfg.travel_speed %}

    _CG28
    RESPOND MSG="QGL"
    
    _SET_LED_STATUS STATUS=calibrating
                                                                                               
    _QUAD_GANTRY_LEVEL
    
    G90
    G28 Z
    
    _SET_LED_STATUS STATUS=standby


####################################################################################################
###################################### ADAPTIVE BED MESH ###########################################
####################################################################################################
[gcode_macro BED_MESH_CALIBRATE]
description: Adaptive bed mesh based on print objects
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = config.bed_mesh.mesh_min %}
    {% set bed_mesh_max = config.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = (bed_mesh_max[0] - bed_mesh_min[0]) / (config.bed_mesh.probe_count[0]-2) %}
    {% set max_probe_point_distance_y = (bed_mesh_max[1] - bed_mesh_min[1]) / (config.bed_mesh.probe_count[1]-2) %}
    
    # Initialize mesh boundaries
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    
    # Apply mesh fuzzing or precise boundaries based on configuration
    {% if macrocfg.mesh_fuzz_enabled == True %}
        {% if all_points %}
            {% set fuzz_range = range(macrocfg.mesh_fuzz_min * 100 | int, macrocfg.mesh_fuzz_max * 100 | int) %}
            {% set x_min = (bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0]))) | max %}
            {% set y_min = (bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1]))) | max %}
            {% set x_max = (bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0]))) | min %}
            {% set y_max = (bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1]))) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0]))] | max %}
        {% set y_min = [bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1]))] | max %}
        {% set x_max = [bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0]))] | min %}
        {% set y_max = [bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1]))] | min %}
    {% endif %}
    
    # Calculate probe points and algorithm selection
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    {% set algorithm = "bicubic" if ([points_x, points_y]|max) > 6 else "lagrange" %}
    {% set min_points = 4 if algorithm == "bicubic" else 3 %}
    {% set points_x = [points_x, min_points]|max %}
    {% set points_y = [points_y, min_points]|max %}
    
    # Reference index calculation for relative reference
    {% set ref_index = (points_x * points_y / 2) | int if config.bed_mesh.relative_reference_index is defined else -1 %}
    
    # Probe attachment and LED status
    {% if macrocfg.docking_probe == True %}
        {macrocfg.attach_macro}
    {% endif %}
    _SET_LED_STATUS STATUS=calibrating
    
    # Execute adaptive mesh calibration
    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
    
    # Cleanup and status return
    {% if macrocfg.docking_probe == True %}
        {macrocfg.dock_macro}
    {% endif %}
    _SET_LED_STATUS STATUS=standby


####################################################################################################
##################################### SPEED TESTING MACRO ##########################################
####################################################################################################

[gcode_macro TEST_SPEED]
description: Comprehensive speed and acceleration testing
# Usage: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
    # Parameter collection with defaults from config
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    {% set iterations = params.ITERATIONS|default(5)|int %}
    {% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    {% set bound = params.BOUND|default(macrocfg.test_speed_bound)|int %}
    {% set smallpatternsize = params.SMALLPATTERNSIZE|default(macrocfg.test_speed_small_pattern)|int %}
    
    # Calculate clean variables first (TEST_SPEED methodology)
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float) / 2 %}
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}
    {% set safe_move_speed = macrocfg.test_speed_safe_move_speed %}
    
    # Save current state and initialize
    SAVE_GCODE_STATE NAME=TEST_SPEED
    RESPOND MSG="🏎️ Starting {iterations} iterations at {speed}mm/s, {accel}mm/s²"
    
    # Home and establish baseline position
    M400
    _CG28
    
    # QGL if configured and not applied
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            _CQGL
            G28 Z
        {% endif %}
    {% endif %}
    
    # Pre-test positioning and status
    _SET_LED_STATUS STATUS=calibrating
    
    G90
    G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{safe_move_speed}
    M400
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{safe_move_speed}
    G4 P{macrocfg.test_speed_pause_time}
    GET_POSITION
    
    # Move to test starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed}
    
    # Apply test velocity limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}
    
    # Execute test pattern iterations
    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed}
        G0 X{x_max} Y{y_max} F{speed}
        G0 X{x_min} Y{y_min} F{speed}
        G0 X{x_max} Y{y_min} F{speed}
        G0 X{x_min} Y{y_max} F{speed}
        G0 X{x_max} Y{y_min} F{speed}
    
        # Large pattern perimeter
        G0 X{x_min} Y{y_min} F{speed}
        G0 X{x_min} Y{y_max} F{speed}
        G0 X{x_max} Y{y_max} F{speed}
        G0 X{x_max} Y{y_min} F{speed}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed}
        G0 X{x_center_max} Y{y_center_max} F{speed}
        G0 X{x_center_min} Y{y_center_min} F{speed}
        G0 X{x_center_max} Y{y_center_min} F{speed}
        G0 X{x_center_min} Y{y_center_max} F{speed}
        G0 X{x_center_max} Y{y_center_min} F{speed}
    
        # Small pattern perimeter
        G0 X{x_center_min} Y{y_center_min} F{speed}
        G0 X{x_center_min} Y{y_center_max} F{speed}
        G0 X{x_center_max} Y{y_center_max} F{speed}
        G0 X{x_center_max} Y{y_center_min} F{speed}
    {% endfor %}
    
    # Restore original velocity limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}
    
    # Post-test verification and cleanup
    M400
    G28                                                         # Full home to address any CoreXZ issues
    
    _SET_LED_STATUS STATUS=calibrating
    
    # Final position verification
    G90
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{safe_move_speed}
    G4 P{macrocfg.test_speed_pause_time}
    GET_POSITION
    
    # Restore state and complete
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
    _SET_LED_STATUS STATUS=standby
    
    RESPOND MSG="✅ Speed test completed"
    

####################################################################################################
################################### BELT TENSION CALIBRATION #######################################
####################################################################################################

[gcode_macro BELT_TENSION]
description: Position toolhead for belt tension testing and calibration
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    # Calculate clean variables first
    {% set x_center = config.stepper_x.position_max|float / 2 %}
    {% set y_position = macrocfg.belt_test_y %}
    {% set z_position = macrocfg.belt_test_z %}
    {% set travel_speed = macrocfg.travel_speed %}
    
    RESPOND MSG="Positioning for belt tension test"
    
    # Home all axes
    _CG28
    
    # Move to test position
    G90                                                         # Absolute positioning
    G0 X{x_center} Y{y_position} Z{z_position} F{travel_speed}
    
    RESPOND MSG="Ready for belt tension testing at X{x_center} Y{y_position} Z{z_position}"
    RESPOND MSG="Z belts: 2.5 - 2.8"
    RESPOND MSG="A/B belts: 1.8 - 2.2"
    RESPOND MSG="Target belt tensions:"


####################################################################################################
################################### ADAPTIVE PURGE (UNUSED) ########################################
####################################################################################################
[gcode_macro _ADAPTIVE_PURGE]
description: Adaptive purge macro - currently unused
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Calculate clean variables first
    {% if macrocfg.purge_adaptive == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(macrocfg.purge_x + macrocfg.purge_distance_x + macrocfg.purge_size)) - macrocfg.purge_distance_x - macrocfg.purge_size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(macrocfg.purge_y + macrocfg.purge_distance_y + macrocfg.purge_size)) - macrocfg.purge_distance_y - macrocfg.purge_size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = macrocfg.purge_x | float %}
        {% set y_origin = macrocfg.purge_y | float %}
    {% endif %}
    
    {% set purge_move_speed = 2.31 * macrocfg.purge_size * macrocfg.purge_flow_rate / (macrocfg.purge_amount * 2.405) %}
    {% set prepurge_speed = macrocfg.purge_flow_rate / 2.405 %}
    {% set travel_speed = macrocfg.travel_speed %}
    
    _SET_LED_STATUS STATUS=printing
    
    G92 E0
    G0 F{travel_speed}
    G90
    G0 X{x_origin} Y{y_origin+macrocfg.purge_size/2}
    G0 Z{macrocfg.purge_z_height}
    M83
    G1 E{macrocfg.purge_tip_distance} F{prepurge_speed}
    G1 X{x_origin+macrocfg.purge_size*0.289} Y{y_origin+macrocfg.purge_size} E{macrocfg.purge_amount/4} F{purge_move_speed}
    G1 E-{macrocfg.purge_retract_small} F{macrocfg.purge_retract_speed}
    G0 Z{macrocfg.purge_z_height*2}
    G0 X{x_origin+macrocfg.purge_size*0.789} Y{y_origin+macrocfg.purge_size}
    G0 Z{macrocfg.purge_z_height}
    G1 E{macrocfg.purge_retract_small} F{macrocfg.purge_retract_speed}
    G1 X{x_origin+macrocfg.purge_size*0.211} Y{y_origin} E{macrocfg.purge_amount/2} F{purge_move_speed}
    G1 E-{macrocfg.purge_retract_small} F{macrocfg.purge_retract_speed}
    G0 Z{macrocfg.purge_z_height*2}
    G0 X{x_origin+macrocfg.purge_size*0.711} Y{y_origin}
    G0 Z{macrocfg.purge_z_height}
    G1 E{macrocfg.purge_retract_small} F{macrocfg.purge_retract_speed}
    G1 X{x_origin+macrocfg.purge_size} Y{y_origin+macrocfg.purge_size/2} E{macrocfg.purge_amount/4} F{purge_move_speed}
    G1 E-{macrocfg.purge_retract_small} F{macrocfg.purge_retract_speed}
    G92 E0
    G0 Z{macrocfg.purge_z_height*2}
    
    _SET_LED_STATUS STATUS=standby


####################################################################################################
####################################### UTILITY MACROS #############################################
####################################################################################################
[gcode_macro _CENTER]
description: Move toolhead to exact center of print area
gcode:
    # Calculate clean variables first
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
    {% set z_center = printer.toolhead.axis_maximum.z|float / 2.0 %}
    {% set travel_speed = printer['gcode_macro _macroVariables'].travel_speed %}

    _CG28
    G90
    G1 X{x_center} Y{y_center} Z{z_center} F{travel_speed}


[gcode_macro PARK]
description: Park toolhead at configured position
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Calculate clean variables first
    {% set park_x = macrocfg.park_x %}
    {% set park_y = macrocfg.park_y %}
    {% set park_z = macrocfg.park_z %}
    {% set travel_speed = macrocfg.travel_speed %}
    
    _CG28
    G90
    G1 X{park_x} Y{park_y} Z{park_z} F{travel_speed}


[gcode_macro _SIMPLE_PAUSE]
description: Simple pause without additional actions
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    {% if printer['gcode_macro _CLIENT_VARIABLE'] is defined %}
        {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% endif %}
    
    {% if config.pause_resume is not defined %}
        RESPOND MSG="❌ Pause/Resume feature not enabled"
    {% else %}
        {% set pause_macro = 'gcode_macro ' + macrocfg.pause_macro|string %}
        {% set pause_base = 'gcode_macro ' + macrocfg.pause_no_park|string %}
        {% set can_pause = True %}
        
        # Macro existence verification
        {% if printer[pause_macro] is not defined %}
            RESPOND MSG="❌ Pause macro does not exist"
            {% set can_pause = False %}
        {% elif printer[pause_base] is not defined %}
            {% set can_pause = False %}
        {% endif %}
        
        # Alternative pause macro detection
        {% if not can_pause %}
            {% set pause_base = 'gcode_macro ' + macrocfg.pause|string + '_BASE' %}
            {% if printer[pause_base] is defined %}
                {% set pause_base = macrocfg.pause|string + '_BASE' %}
                {% set can_pause = True %}
            {% else %}
                {% set pause_base = 'gcode_macro ' + macrocfg.pause|string + '.0' %}
                {% if printer[pause_base] is defined %}
                    {% set pause_base = macrocfg.pause|string + '.0' %}
                    {% set can_pause = True %}
                {% else %}
                    {% set pause_base = 'PAUSE' %}
                    {% set can_pause = True %}
                {% endif %}
            {% endif %}
        {% endif %}
        
        # Execute pause if conditions are met
        {% if can_pause %}
            {% if printer.pause_resume.is_paused %}
                RESPOND MSG="Already paused"
            {% else %}
                {% if "xyz" not in printer.toolhead.homed_axes %}
                    RESPOND MSG="❌ Cannot pause - toolhead not homed"
                {% else %}
                    {pause_base}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}


####################################################################################################
############################# CENTRAL SUPPORT FUNCTIONS ########################################
####################################################################################################

[gcode_macro _SET_LED_STATUS]
description: Centralized LED status management
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set STATUS = params.STATUS|default('standby')|lower %}
    
    {% if macrocfg.led_status == True %}
        {% if STATUS == 'standby' %}
            {macrocfg.status_standby}
        {% elif STATUS == 'calibrating' %}
            {macrocfg.status_calibrating}
        {% elif STATUS == 'heating' %}
            {macrocfg.status_heating}
        {% elif STATUS == 'cooling' %}
            {macrocfg.status_cooling}
        {% elif STATUS == 'printing' %}
            {macrocfg.status_printing}
        {% elif STATUS == 'error' %}
            {macrocfg.status_error}
        {% elif STATUS == 'finished' %}
            {macrocfg.status_finished}
        {% elif STATUS == 'm600' %}
            {macrocfg.status_m600}
        {% endif %}
    {% endif %}