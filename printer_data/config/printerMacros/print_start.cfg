####################################################################################################
######################################### PRINT STARTING ###########################################
####################################################################################################

####################################################################################################
################################### MAIN START PRINT SEQUENCE ######################################
####################################################################################################

[gcode_macro START_PRINT_1]
description: First phase of print start - setup through filament loading
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Initialize print start process
    _MANAGE_PRINT_STATE STATE=start

    # Set initial status and clear any pause state
    _SET_LED_STATUS STATUS=standby
    CLEAR_PAUSE
    
    # Establish coordinate and extrusion modes
    G90                                                         # Absolute coordinates
    M83                                                         # Relative extrusion
    _SET_DEFAULTS MODE=START                                    # Apply start-print defaults
    
    # Execute preparation sequence
    _HEAT_SURFACE                                               # Heat bed and preheat extruder
    _PREP_CHAMBER                                               # Prepare chamber heating/soaking
    _PREP_FANS                                                  # Configure cooling fans
    _PREP_SURFACE                                               # Homing, calibration, meshing
    _PREP_EXTRUDER                                              # Heat nozzle and handle filament


####################################################################################################
##################################### SURFACE HEATING CONTROL ######################################
####################################################################################################

[gcode_macro _HEAT_SURFACE]
description: Heat bed and preheat extruder for print preparation
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}

    {% if macrocfg.bed_temp > 0 %}
        _SET_LED_STATUS STATUS=heating
    
        # Extruder preheating if configured
        {% if macrocfg.extruder_preheat_temp > 0 %}
            RESPOND MSG="üå°Ô∏è Warming extruder: {macrocfg.extruder_preheat_temp|int}¬∞C"
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={macrocfg.extruder_preheat_temp}
        {% endif %}

        # Bed heating sequence
        RESPOND MSG="üî• Heating bed: {macrocfg.bed_temp|int}¬∞C"
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={macrocfg.bed_temp}
    
        {% if macrocfg.bed_fan == True %}
            {macrocfg.bed_fan_slow}                             # Start bed fans at low speed
        {% endif %}
    
        # Calculate clean variables for temperature waiting
        {% set temp_tolerance = macrocfg.bed_temp_tolerance %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={macrocfg.bed_temp - 1} MAXIMUM={macrocfg.bed_temp + temp_tolerance}
    
        {% if macrocfg.bed_fan == True %}
            {macrocfg.bed_fan_fast}                             # Increase bed fan speed
        {% endif %}
    {% endif %}

    _SET_LED_STATUS STATUS=standby


####################################################################################################
################################## CHAMBER PREPARATION CONTROL #####################################
####################################################################################################

[gcode_macro _PREP_CHAMBER]
description: Prepare chamber heating and initiate heat soak if configured
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    {% if macrocfg.chamber == True and macrocfg.chamber_temp != 0 %}
        _SET_LED_STATUS STATUS=heating
    
        # Set chamber target temperature based on sensor type
        {% if macrocfg.chamber_type == 'temperature_fan' %}
            SET_TEMPERATURE_FAN_TARGET temperature_fan={macrocfg.chamber_name} target={macrocfg.chamber_temp}
        {% elif macrocfg.chamber_type == 'heater_generic' %}
            SET_HEATER_TEMPERATURE HEATER={macrocfg.chamber_name} TARGET={macrocfg.chamber_temp}
        {% endif %}
    
        # Initiate heat soak sequence if enabled
        {% if macrocfg.heat_soak == True %}
            SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=heat_soak_complete VALUE=0
            _HEAT_SOAK
        {% endif %}
    {% endif %}


####################################################################################################
##################################### HEAT SOAK MANAGEMENT #########################################
####################################################################################################

[gcode_macro _HEAT_SOAK]
description: Control chamber heat soak with time or temperature based soaking
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Parameter processing for manual heat soak calls
    {% if params.SENSOR is defined %}
        {% set sensor = params.SENSOR | default(macrocfg.chamber_name) | lower %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_name VALUE={sensor}
    {% endif %}
    
    {% if params.SENSOR_TYPE is defined %}
        {% set sensor_type = params.SENSOR_TYPE | default(macrocfg.chamber_type) | lower %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_type VALUE={sensor_type}
    {% endif %}
    
    {% if params.EXTRUDER is defined %}
        {% set pre_temp = params.EXTRUDER | default(macrocfg.extruder_preheat_temp) | float %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=extruder_preheat_temp VALUE={pre_temp}
    {% endif %}
    
    # Configure soak type (time-based or temperature-based)
    {% if params.TIME is defined %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=time_soak VALUE=1
        {% set time = params.TIME | default(macrocfg.chamber_time) | float %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_time VALUE={time}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=time_soak VALUE=0
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=temp_soak VALUE=1
    {% endif %}
    
    # Set target temperatures
    {% set temp = params.TEMP | default(macrocfg.chamber_temp) | float %}
    {% set bed = params.BED | default(macrocfg.bed_temp) | float %}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_temp VALUE={temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=bed_temp VALUE={bed}

    # Set chamber temperature based on sensor type
    {% if macrocfg.chamber_type == 'temperature_fan' %}
        SET_TEMPERATURE_FAN_TARGET temperature_fan={macrocfg.chamber_name} target={macrocfg.chamber_temp}
    {% elif macrocfg.chamber_type == 'heater_generic' %}
        SET_HEATER_TEMPERATURE HEATER={macrocfg.chamber_name} TARGET={macrocfg.chamber_temp}
    {% endif %}
    
    # Pre-soak setup for standalone heat soak calls
    {% if macrocfg.starting_print|int == 0 %}  
        _CG28                                                   # Home all axes
        M106 S{macrocfg.heat_soak_fan_speed}                    # Part cooling fan to accelerate heating
        _HEAT_SURFACE                                           # Ensure bed is heated
    {% endif %}
    
    # Execute the actual soaking procedure
    _DO_SOAK {rawparams}
    M106 S0                                                     # Turn off part cooling fan


[gcode_macro _DO_SOAK]
description: Execute the actual heat soak procedure
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    _SET_LED_STATUS STATUS=heating
    
    # Time-based soaking
    {% if macrocfg.time_soak == True %}
        {% set soak_time_seconds = macrocfg.chamber_time * 60 %}
        RESPOND MSG="Soaking for {macrocfg.chamber_time} minutes"
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_TIMER DURATION={soak_time_seconds}
        SET_IDLE_TIMEOUT TIMEOUT={macrocfg.soak_idle_time}
    {% endif %}
    
    # Temperature-based soaking
    {% if macrocfg.temp_soak == True %}
        {% if macrocfg.bed_fan == True %}
            {macrocfg.bed_fan_fast}
        {% endif %}
        RESPOND MSG="üå°Ô∏è Soaking chamber: {macrocfg.chamber_temp|int}¬∞C"
        _SET_CHAMBER_CONTROL TEMP={macrocfg.chamber_temp} WAIT=true
        
        RESPOND MSG="‚úÖ Chamber soak completed"
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=heat_soak_complete VALUE=1
    {% endif %}
    
    # Stop bed fans and heating LEDs after successful soak
    _SET_LED_STATUS STATUS=standby
    
    {% if macrocfg.heat_soak_complete == 1 %}
        {macrocfg.bed_fan_stop}
    {% endif %}


[delayed_gcode _HEAT_SOAK_TIMER]
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="‚úÖ Soak completed"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=heat_soak_complete VALUE=1
    {macrocfg.bed_fan_stop}
    
    # Resume print start if this was part of print sequence
    {% if macrocfg.starting_print|int == 1 %}
        RESUME_BASE
    {% endif %}


####################################################################################################
##################################### FAN PREPARATION CONTROL ######################################
####################################################################################################

[gcode_macro _PREP_FANS]
description: Configure cooling fans for print operation
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Controller fan management
    {% if macrocfg.controller_fan == True %}
        {macrocfg.controller_fan_start}
    {% endif %}
    
    # Ensure part cooling fan is off initially
    M107
    
    # Nevermore/filter fan activation
    {% if macrocfg.nevermore == True and macrocfg.nevermore_speed > 0 %}
        SET_FAN_SPEED FAN={macrocfg.nevermore_name} SPEED={macrocfg.nevermore_speed}
    {% endif %}


####################################################################################################
##################################### SURFACE PREPARATION ##########################################
####################################################################################################

[gcode_macro _PREP_SURFACE]
description: Complete surface preparation - homing, calibration, and meshing
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    # Homing and probe management
    RESPOND MSG="Homing"

    _SET_LED_STATUS STATUS=calibrating
    
    {% if macrocfg.docking_probe == True %}
        RESPOND MSG="Collecting probe"
        {% if printer.toolhead.homed_axes != "xyz" %}
            RESPOND MSG="Homing XY axes"
            G28 Y X
        {% endif %}
        {macrocfg.attach_macro}
        RESPOND MSG="Homing Z axis"
        G28 Z
    {% else %}
        G28
    {% endif %}
    
    # Optional probe cleaning
    {% if macrocfg.clean_probe == True %}
        {macrocfg.clean_macro}
    {% endif %}
    
    M400
    
    # Z-axis calibration procedures
    {% if macrocfg.auto_z_calibrate == True %}
        {% if config.z_calibration is defined %}
            RESPOND MSG="Calibrating Z offset"
            _SET_LED_STATUS STATUS=calibrating
            CALIBRATE_Z
        {% else %}
            RESPOND MSG="‚ùå Z-Calibration not configured!"
        {% endif %}
    {% endif %}
    
    # Gantry leveling procedures
    {% if macrocfg.z_tilt == True %}
        {% if config.z_tilt is defined %}
            RESPOND MSG="‚öôÔ∏è Adjusting Z-tilt"
            _SET_LED_STATUS STATUS=calibrating
            Z_TILT_ADJUST
        {% else %}
            RESPOND MSG="‚ùå Z-Tilt not configured!"
        {% endif %}
    {% elif macrocfg.qgl == True %}
        {% if config.quad_gantry_level is defined %}
            _SET_LED_STATUS STATUS=calibrating
            QUAD_GANTRY_LEVEL
        {% else %}
            RESPOND MSG="‚ùå QGL not configured!"
        {% endif %}
    {% endif %}

    M400
    
    # Bed mesh generation or loading
    {% if macrocfg.bed_mesh == True %}
        {% if config.bed_mesh is defined %}
            {% if macrocfg.load_mesh == True %}
                BED_MESH_PROFILE LOAD={macrocfg.mesh_profile}
                RESPOND MSG="Loaded mesh profile: {macrocfg.mesh_profile}"
            {% else %}
                RESPOND MSG="Bed meshing"
                {% if macrocfg.mesh_adaptive == True %}
                    BED_MESH_CALIBRATE
                {% else %}
                    _BED_MESH_CALIBRATE
                {% endif %}
            {% endif %}
        {% else %}
            RESPOND MSG="‚ùå Bed mesh not configured!"
        {% endif %}
    {% endif %}
    
    # Dock probe after calibration procedures
    {% if macrocfg.docking_probe == True %}
        {macrocfg.dock_macro}
    {% endif %}

    RESPOND MSG="‚úÖ Calibration completed"

####################################################################################################
################################# EXTRUDER PREPARATION PHASE 1 #####################################
####################################################################################################

[gcode_macro _PREP_EXTRUDER]
description: Heat nozzle and manage filament loading for print start
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Enable filament sensors if configured
    {% if macrocfg.auto_filament_sensor == True %}
        _ENABLE_FILAMENT_SENSOR
    {% endif %}

    M400
    
    # Begin extruder heating
    _SET_LED_STATUS STATUS=heating
    
    RESPOND MSG="üî• Heating nozzle: {macrocfg.extruder_temp|int}¬∞C"
    M104 S{macrocfg.extruder_temp}
    
    # Calculate clean positioning variables
    {% set travel_speed = macrocfg.travel_speed %}
    {% set z_lift_speed = macrocfg.preheat_z_lift_speed %}
    
    # Position for heating phase
    {% if macrocfg.cleaning == True %}
        {% set pos_x = macrocfg.nozzle_clean_x %}
        {% set pos_y = macrocfg.nozzle_clean_y %}
        {% set pos_z = macrocfg.park_z %}
    {% else %}
        {% set pos_x = macrocfg.preheat_x %}
        {% set pos_y = macrocfg.preheat_y %}
        {% set pos_z = macrocfg.preheat_z %}
    {% endif %}
    
    G0 Z{pos_z} F{z_lift_speed}
    G0 X{pos_x} Y{pos_y} F{travel_speed}
    
    # Wait for target temperature
    M109 S{macrocfg.extruder_temp}

    _SET_LED_STATUS STATUS=standby
    
    # Check filament status and handle loading
    _CHECK_FILAMENT_FOR_PRINT_START


####################################################################################################
############################# FILAMENT DETECTION AND LOADING SYSTEM ################################
####################################################################################################

[gcode_macro _CHECK_FILAMENT_FOR_PRINT_START]
description: Check filament presence with dual sensor validation
variable_waiting_for_filament: False
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="Checking filament sensors..."
    
    # Get both sensor states using direct access
    {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
    {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
    
    # Streamlined sensor validation logic
    {% if upper_detected and lower_detected %}
        # Both sensors detect - filament is properly loaded
        RESPOND MSG="‚úÖ Sensors detected - filament loaded"
        _FINALIZE_PRINT_START_LOAD DID_LOADING=0
    {% else %}
        # Any other combination - pause and load filament
        RESPOND MSG="‚ùå Sensors NOT detected - insert filament..."
        SET_GCODE_VARIABLE MACRO=_CHECK_FILAMENT_FOR_PRINT_START VARIABLE=waiting_for_filament VALUE=True
        
        # SET EXTENDED IDLE TIMEOUT TO PREVENT AUTO-RESUME
        SET_IDLE_TIMEOUT TIMEOUT={macrocfg.filament_m600_idle_time}
        
        # Enable audio alerts if configured
        {% if macrocfg.audio_status == True %}
            {macrocfg.filament_m600_audio}
            _ALERT_BEEP_ON
        {% endif %}
        
        _SET_LED_STATUS STATUS=error
        
        PAUSE_BASE
        LOAD_FILAMENT
    {% endif %}

    {% if macrocfg.flag_end_unload == False %}
        {% set prime_speed = macrocfg.filament_m600_fast_speed %}
        {% set prime_amount = macrocfg.end_retract_length * macrocfg.print_start_prime_factor %}
        G1 E{prime_amount} F{prime_speed}
    {% endif %}


####################################################################################################
################################# FINAL PRINT PREPARATION ##########################################
####################################################################################################

[gcode_macro START_PRINT_2]
description: Second phase of print start - final preparation and cleanup
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="üèÅ Final print preparation"
    
    # Set LED status
    _SET_LED_STATUS STATUS=standby
    
    # Optional nozzle cleaning
    {% if macrocfg.cleaning == True %}
        {macrocfg.clean_macro}
    {% endif %}
    
    # Optional nozzle purging
    {% if macrocfg.purging == True %}
        _SET_LED_STATUS STATUS=printing
        {macrocfg.purge_macro}
    {% endif %}
    
    # Finalize print start process
    _MANAGE_PRINT_STATE STATE=end
    
    RESPOND MSG="Starting print"
    
    _SET_LED_STATUS STATUS=printing
    
    # Calculate clean variables for final setup
    {% set mini_retract_speed = macrocfg.filament_m600_fast_speed %}
    {% set prefill_amount = macrocfg.purge_mid_retract * macrocfg.prefill_factor %}
    
    # Set final coordinate modes and reset extruder
    G21                                                         # Set units to millimeters
    G91                                                         # Relative positioning
    G1 E{prefill_amount} F{mini_retract_speed}                  # Prefill nozzle
    G90                                                         # Absolute coordinates
    M82                                                         # Absolute extrusion
    G92 E0                                                      # Reset extruder position

    # Optional final nozzle cleaning
    {% if macrocfg.cleaning == True %}
        {macrocfg.clean_macro}
    {% endif %}
        