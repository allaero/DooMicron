####################################################################################################
########################################## CUSTOM GCODES ###########################################
####################################################################################################

####################################################################################################
#################################### STANDARD GCODE OVERRIDES ######################################
####################################################################################################

[gcode_macro G27]
description: Park the toolhead at configured position
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {macrocfg.park_base}


[gcode_macro G29]
description: Bed mesh calibration with optional temperature control
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set t = params.T|default(0)|float %}
    {% set min_temp = macrocfg.mesh_min_temp %}
    
    {% if printer.idle_timeout.state == "Printing" %}
        RESPOND MSG="❌ Cannot mesh while printing"
    {% else %}   
        _CG28
        {% if t > min_temp %}
            SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t}
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1}
        {% endif %}
        BED_MESH_CALIBRATE
    {% endif %}


####################################################################################################
#################################### HEATER CONTROL OVERRIDES ######################################
####################################################################################################

[gcode_macro M109]
description: Wait for hotend temperature with feedback
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 {rawparams}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
    {% endif %}


####################################################################################################
##################################### STATUS OUTPUT CONTROL ########################################
####################################################################################################

[gcode_macro M116]
description: Silent status feedback - no output
gcode:


[gcode_macro M1187]
description: Dual status feedback to console and display
gcode:
    M118 {rawparams}


[gcode_macro M1178]
description: Alternative dual status feedback macro
gcode:
    M1187 {rawparams}


####################################################################################################
################################## MOTION CONTROL OVERRIDES #######################################
####################################################################################################

[gcode_macro M201]
description: Set maximum acceleration limits
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set accel_reduction_factor = macrocfg.accel_reduction_factor %}
    
    {% if 'X' in params or 'Y' in params %}
        {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
        {% if accel < printer.toolhead.max_accel %}
            SET_VELOCITY_LIMIT ACCEL="{accel}" ACCEL_TO_DECEL="{accel * accel_reduction_factor}"
        {% endif %}
    {% else %}
        SET_VELOCITY_LIMIT
    {% endif %}


[gcode_macro M204]
description: Set print and travel acceleration
rename_existing: M204.1
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set accel_reduction_factor = params.F|default(macrocfg.accel_reduction_factor)|float %}
    
    {% if 'S' in params %}
        {% set s = params.S|float %}
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={s * accel_reduction_factor}
    {% else %}
        {% if 'P' in params %}
            {% set p = params.P|float %}
            {% if 'T' in params %}
                {% set t = params.T|float %}
                {% set accel = p if p < t else t %}
                SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * accel_reduction_factor}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={p * accel_reduction_factor}
            {% endif %}
        {% elif 'T' in params %}
            {% set t = params.T|float %}
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={t * accel_reduction_factor}
        {% endif %}
    {% endif %}


[gcode_macro M205]
description: Set square corner velocity (jerk control)
gcode:
    {% if 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
    {% endif %}


####################################################################################################
##################################### PID TUNING MACROS ############################################
####################################################################################################

[gcode_macro _PID_EXTRUDER]
description: PID tune extruder with fan speed control
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set e = printer.toolhead.extruder %}
    {% set T = params.TEMPERATURE|default(macrocfg.pid_extruder_temp)|float %}
    {% set S = params.FAN_IN_PERCENT|default(0)|float * macrocfg.pid_fan_speed_multiplier %}
    {% set P = printer.configfile.config[e].pid_kp|float %}
    {% set I = printer.configfile.config[e].pid_ki|float %}
    {% set D = printer.configfile.config[e].pid_kd|float %}
    
    M106 S{S}
    RESPOND MSG="Current PID: Kp={P} Ki={I} Kd={D}"
    PID_CALIBRATE HEATER={e} TARGET={T}
    TURN_OFF_HEATERS
    SAVE_CONFIG


[gcode_macro M301]
description: Hotend PID tune with extruder selection
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set e = params.E|default(0)|int %}
    {% set t = params.T|default(macrocfg.pid_extruder_temp)|float %}
    {% set S = params.FAN_IN_PERCENT|default(0)|float * macrocfg.pid_fan_speed_multiplier %}
    
    {% if e == 0 %}
        {% set extruder = printer.toolhead.extruder %}
    {% else %}
        {% set extruder = 'extruder' + e|string %}
    {% endif %}
    
    {% set P = printer.configfile.config[extruder].pid_kp|float %}
    {% set I = printer.configfile.config[extruder].pid_ki|float %}
    {% set D = printer.configfile.config[extruder].pid_kd|float %}
    
    M106 S{S}
    RESPOND MSG="Previous PID: Kp={P} Ki={I} Kd={D}"
    PID_CALIBRATE HEATER={extruder} TARGET={t}


[gcode_macro _PID_BED]
description: PID tune bed heater
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set T = params.TEMPERATURE|default(macrocfg.pid_bed_temp)|float %}
    {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
    {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
    {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
    
    RESPOND MSG="Current bed PID: Kp={P} Ki={I} Kd={D}"
    PID_CALIBRATE HEATER=heater_bed TARGET={T}
    TURN_OFF_HEATERS
    SAVE_CONFIG


[gcode_macro M304]
description: Bed PID tune alternative interface
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set t = params.T|default(macrocfg.pid_bed_temp)|float %}
    {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
    {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
    {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
    
    RESPOND MSG="Previous bed PID: Kp={P} Ki={I} Kd={D}"
    PID_CALIBRATE HEATER=heater_bed TARGET={t}


####################################################################################################
################################## BED MESH MANAGEMENT #############################################
####################################################################################################

[gcode_macro M420]
description: Load or clear bed mesh profile
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set s = params.S|default(0)|int %}
    {% set default_profile = macrocfg.mesh_profile %}
    
    {% if s == 0 %}
        BED_MESH_CLEAR
        RESPOND MSG="Bed mesh cleared"
    {% else %}
        {% set l = params.L|default(default_profile) %}
        BED_MESH_PROFILE LOAD={l}
        RESPOND MSG="Loaded bed mesh: {l}"
    {% endif %}


####################################################################################################
################################## STATE SAVE/RESTORE ##############################################
####################################################################################################

[gcode_macro M500]
description: Save current gcode state
gcode:
    SAVE_GCODE_STATE NAME=M500


[gcode_macro M501]
description: Restore saved gcode state
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set default_speed = macrocfg.state_restore_speed %}
    
    {% if params.SPEED is defined %}
        {% set speed = params.SPEED|default(default_speed)|int %}
        RESTORE_GCODE_STATE NAME=M500 MOVE=1 SPEED={speed}
    {% else %}
        RESTORE_GCODE_STATE NAME=M500 MOVE=1
    {% endif %}


####################################################################################################
################################## FILAMENT OPERATIONS #############################################
####################################################################################################

[gcode_macro M600]
description: Integrated filament change procedure
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    M400
    _SET_LED_STATUS STATUS=m600
    
    {% if printer.virtual_sdcard.is_active and not printer.pause_resume.is_paused %}
        {macrocfg.pause_no_park}
    {% endif %}
    
    _EXECUTE_PARKING TYPE=filament
    
    {% if macrocfg.audio_status == True %}
        _ALERT_BEEP_ON
    {% endif %}
    
    # Handle different M600 scenarios
    {% if macrocfg.filament_m600_coldstart == 0 and macrocfg.runout == 0 %}
        _CG28
        {% if macrocfg.auto_unload == True %}
            UNLOAD_FILAMENT
        {% else %}
            M109 S0
            {% if macrocfg.use_fluidd == True %}
                {% if macrocfg.filament_m600_coldstart == 0 %}
                    RESPOND MSG="⚠️ Run UNLOAD_FILAMENT to unload"
                    {% if macrocfg.audio_status == True and macrocfg.audio_frequency > 0 %}
                        RESPOND MSG="⚠️ Run _ALERT_BEEP_OFF to silence beeper"
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    
    # Reset runout flag
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=runout VALUE=0


[gcode_macro M601]
description: Pause current print
gcode:
    PAUSE


[gcode_macro M900]
description: Set linear advance (pressure advance)
gcode:
    {% if 'K' in params %}
        {% if 'E' in params %}
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
        {% else %}
            SET_PRESSURE_ADVANCE ADVANCE={params.K}
        {% endif %}
        RESPOND MSG="Pressure advance set to {params.K}"
    {% endif %}


####################################################################################################
################################ POSITIONING MODE STORAGE ##########################################
####################################################################################################

[gcode_macro _P500]
description: Store current positioning mode
variable_last_coords: 91
variable_last_extrude: 83
gcode:
    {% set last_coords = 90 if printer.gcode_move.absolute_coordinates == True else 91 %}
    {% set last_extrude = 82 if printer.gcode_move.absolute_extrusion == True else 83 %}
    
    SET_GCODE_VARIABLE MACRO=_P500 VARIABLE=last_coords VALUE={last_coords}
    SET_GCODE_VARIABLE MACRO=_P500 VARIABLE=last_extrude VALUE={last_extrude}


[gcode_macro _P501]
description: Restore stored positioning mode
gcode:
    {% set stored_coords = printer['gcode_macro _P500'].last_coords %}
    {% set stored_extrude = printer['gcode_macro _P500'].last_extrude %}
    
    # Get current positioning modes
    {% set current_coords = 90 if printer.gcode_move.absolute_coordinates == True else 91 %}
    {% set current_extrude = 82 if printer.gcode_move.absolute_extrusion == True else 83 %}
    
    # Restore coordinate positioning if different
    {% if current_coords != stored_coords %}
        {% if stored_coords == 90 %}
            G90
        {% else %}
            G91
        {% endif %}
    {% endif %}
    
    # Restore extrusion positioning if different
    {% if current_extrude != stored_extrude %}
        {% if stored_extrude == 82 %}
            M82
        {% else %}
            M83
        {% endif %}
    {% endif %}
