####################################################################################################
######################################## AIR FILTER ################################################
####################################################################################################

####################################################################################################
#################################### VOC SCRUBBING CONTROL #########################################
####################################################################################################

[gcode_macro _SCRUBBER]
description: Run Nevermore filter for VOC scrubbing with auto-shutoff
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}

    RESPOND MSG="Scrubbing VOCs"
    
    # Activate Nevermore filter at configured speed
    SET_FAN_SPEED FAN={macrocfg.nevermore_name} SPEED={macrocfg.scrub_speed}
    
    # Set automatic shutoff timer
    UPDATE_DELAYED_GCODE ID=_SCRUB_TIMER DURATION={macrocfg.scrub_time}

[delayed_gcode _SCRUB_TIMER]
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Turn off Nevermore filter
    SET_FAN_SPEED FAN={macrocfg.nevermore_name} SPEED=0
    
    # Handle end-print sequence coordination
    {% if macrocfg.end_print == True %}
        {% if macrocfg.exhaust_fan == True %}
            RESPOND MSG="Exhausting chamber"
            {macrocfg.exhaust_fan_start}                        # Start exhaust fan
            UPDATE_DELAYED_GCODE ID=_EXHAUST_FAN_DELAY DURATION={macrocfg.exhaust_time}
        {% else %}
            _SET_DEFAULTS MODE=END                              # Reset to default settings
            {% if macrocfg.power_off == True %}
                {macrocfg.off_macro}                            # Execute power off sequence
            {% endif %}
        {% endif %}
    {% endif %}
    
    # LED status indication
    _SET_LED_STATUS STATUS=standby

    M400
    RESPOND MSG="âœ… Scrubbing VOCs complete"


####################################################################################################
################################# FILTER MAINTENANCE CONTROL #######################################
####################################################################################################

[gcode_macro RESET_AIR_FILTER]
description: Reset air filter replacement timer to zero
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filter_time VALUE=0
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
    
    RESPOND MSG="Air filter timer reset"


[gcode_macro QUERY_AIR_FILTER]
description: Display current air filter runtime since last reset
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set hours = "%.2f"|format(macrocfg.filter_time|int / 3600) %}
    
    RESPOND MSG="Air filter runtime: {hours} hours"


####################################################################################################
############################### FILTER RUNTIME TRACKING SYSTEM #####################################
####################################################################################################

[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set cached_time = macrocfg.filter_time|int %}
    {% set timer_increment = macrocfg.filter_timer_increment %}
    
    # Initialize timer from saved variables if needed
    {% if cached_time == -1 %}
        {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filter_time VALUE={cached_time}
    {% endif %}
    
    # Increment timer if filter is running
    {% if printer[macrocfg.nevermore_type + " " + macrocfg.nevermore_name].speed|float > 0 %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filter_time VALUE={cached_time + timer_increment}
    {% endif %}
    
    # Check for filter replacement notification
    {% set replacement_seconds = macrocfg.hours_until_replacement|float * 3600 %}
    {% if cached_time > replacement_seconds %}
        {macrocfg.filter_replacement}                           # Execute replacement notification macro
    {% endif %}
    
    # Schedule next timer check
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION={timer_increment}


[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
    {% set actual_time = macrocfg.filter_time|float %}
    {% set flush_interval = macrocfg.filter_flush_interval %}
    
    # Save current runtime if different from stored value
    {% if saved_time != actual_time %}
        SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
    {% endif %}
    
    # Schedule next flush operation
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION={flush_interval}
    
    