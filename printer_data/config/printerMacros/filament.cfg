####################################################################################################
######################################### FILAMENT CONTROL #########################################
####################################################################################################

####################################################################################################
#################################### FILAMENT EXTRACTION ###########################################
####################################################################################################

[gcode_macro _EXTRACT_FILAMENT]
description: Extract filament with tip shaping and cutting
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Calculate clean speed variables first
    {% set retract_speed = macrocfg.filament_retract_speed %}
    {% set unload_speed = macrocfg.filament_m600_fast_speed %}
    
    G91                                                         # Relative positioning
    G1 E-{macrocfg.tip_tune_1} F{retract_speed}                 # Quick retraction
    G1 E{macrocfg.tip_tune_1} F{retract_speed}                  # Quick extrusion
    G1 E-{macrocfg.tip_tune_2} F{retract_speed}                 # Controlled retraction
    G1 E{macrocfg.tip_tune_2} F{retract_speed}                  # Skinny dip extrusion
    G1 E-{macrocfg.tip_tune_3} F{retract_speed}                 # Pull to cold end

    _FILAMENT_CUT                                               # Execute cutting sequence

    G1 E{macrocfg.post_cut_push} F{macrocfg.filament_slow_speed}  # Return to hotend slowly
    G1 E-{macrocfg.filament_m600_unload_length} F{unload_speed}   # Main unload retraction
    G90                                                         # Absolute positioning
    M400                                                        # Wait for completion


####################################################################################################
################################### MANUAL FILAMENT CHANGE #########################################
####################################################################################################

[gcode_macro COLOR_CHANGE]
description: Color change procedure with automated handling
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="üé® Changing colors"
    
    SET_IDLE_TIMEOUT TIMEOUT={macrocfg.filament_m600_idle_time}  # Extend timeout
    
    {% if macrocfg.audio_status == True %}
        {macrocfg.filament_m600_audio}                          # Audio notification
        _ALERT_BEEP_ON                                          # Enable alert beep
    {% endif %}
    
    M600                                                        # Execute M600
    M400                                                        # Wait for completion
    
    # Save current temperature for restoration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filament_m600_prev_temp VALUE={printer.extruder.target}


####################################################################################################
#################################### FILAMENT UNLOADING ############################################
####################################################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament with integrated heating protection
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    {% set LENGTH = params.LENGTH|default(macrocfg.filament_m600_unload_length)|float %}
    {% set TARGET = params.TARGET|default(macrocfg.filament_m600_default_temp)|float %}

    _CG28                                                       # Home if needed
    
    {% if macrocfg.audio_status == True %}
        _ALERT_BEEP_OFF                                         # Turn off beep
    {% endif %}
    
    # Temperature management and validation
    {% set cur_temp = printer.extruder.temperature|float %}
    {% set cur_targ = printer.extruder.target|int %}
    {% set min_extrude = config.extruder.min_extrude_temp|int if config.extruder.min_extrude_temp is defined else macrocfg.min_extrude_temp %}
    
    {% if macrocfg.filament_m600_prev_temp != 0 %}
        {% set TARGET = macrocfg.filament_m600_prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %}
        {% set TARGET = params.TARGET|int|default(macrocfg.filament_m600_default_temp) %}
    {% endif %}
    
    # Heat nozzle if needed
    {% if cur_temp < (TARGET - macrocfg.temp_tolerance) %}
        _SET_LED_STATUS STATUS=heating
        RESPOND MSG="üî• Nozzle heating"
        M109 S{TARGET}
    {% endif %}
    
    _SET_LED_STATUS STATUS=m600
    
    RESPOND MSG="Unloading filament"
    
    {% if macrocfg.auto_filament_sensor == True %}
        _DISABLE_FILAMENT_SENSOR                                # Disable sensors during unload
    {% endif %}
    
    _EXTRACT_FILAMENT                                           # Execute extraction sequence
    
    {% if macrocfg.auto_filament_sensor == True %}
        _ENABLE_FILAMENT_SENSOR                                 # Re-enable sensors
    {% endif %}
    
    _SET_LED_STATUS STATUS=m600
   
    {% if macrocfg.use_fluidd == True and macrocfg.auto_load == False %}
        RESPOND MSG="‚ö†Ô∏è Run LOAD_FILAMENT to load new filament"
    {% endif %}

    M400
    RESPOND MSG="‚úÖ Filament unloading complete"


####################################################################################################
################################## SMART PRINT STATE DETECTION #####################################
####################################################################################################

[gcode_macro _GET_PRINT_STATE]
description: Centralized print state detection for all macros
gcode:
    # Get multiple state indicators
    {% set sd_progress = printer.virtual_sdcard.progress %}
    {% set print_state = printer.print_stats.state|lower %}
    {% set filename = printer.print_stats.filename %}
    {% set print_duration = printer.print_stats.total_duration %}
    
    # Determine if we're mid-print using multiple fallbacks
    {% set in_print = (print_state == "printing") or (print_state == "paused") or (sd_progress > 0 and sd_progress < 1.0) or (filename|length > 0 and print_duration > 0) %}
    
    # Store the result for other macros to use
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=currently_printing VALUE={1 if in_print else 0}


####################################################################################################
################################## UNIFIED FILAMENT LOADING ########################################
####################################################################################################

[gcode_macro LOAD_FILAMENT]
description: Unified filament loading with smart purge selection
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Detect current print state
    _GET_PRINT_STATE
    
    # Route to appropriate loading sequence based on context
    {% if macrocfg.starting_print == 1 %}
        # Print start context - use dedicated print start loading
        _LOAD_FILAMENT_PRINT_START
    {% else %}
        # Color change or manual loading context
        _LOAD_FILAMENT_COLOR_CHANGE
    {% endif %}


####################################################################################################
############################# OPTIMIZED PRINT START LOADING ########################################
####################################################################################################

[gcode_macro _LOAD_FILAMENT_PRINT_START]
description: Streamlined print start filament loading
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # CRITICAL: Ensure sensors are enabled for loading operations
    {% if macrocfg.auto_filament_sensor == True %}
        RESPOND MSG="üîå Ensuring filament sensors are enabled"
        _ENABLE_FILAMENT_SENSOR
        G4 P{macrocfg.auto_filament_delay_ms}                   # Wait for sensors to activate
    {% endif %}
    
    # Check current sensor states and route accordingly
    {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
    {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
    {% if lower_detected %}
        RESPOND MSG="‚úÖ Filament already loaded"
        _FINALIZE_PRINT_START_LOAD DID_LOADING=0               # No loading needed
    {% elif upper_detected %}
        RESPOND MSG="Loading filament to hotend"
        _EXTRUDE_TO_HOTEND CONTEXT=print_start
    {% else %}
        RESPOND MSG="‚ö†Ô∏è Insert filament - waiting for detection"
        _WAIT_FOR_INSERTION CONTEXT=print_start
    {% endif %}

####################################################################################################
############################# OPTIMIZED COLOR CHANGE LOADING #######################################
####################################################################################################

[gcode_macro _LOAD_FILAMENT_COLOR_CHANGE]
description: Streamlined color change filament loading
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Ensure sensors are enabled for loading operations
    {% if macrocfg.auto_filament_sensor == True %}
        _ENABLE_FILAMENT_SENSOR
        G4 P{macrocfg.auto_filament_delay_ms}                   # Wait for sensors to activate
    {% endif %}
    
    # Check current sensor states and route accordingly
    {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
    {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
    {% if lower_detected %}
        RESPOND MSG="‚úÖ Filament already loaded"
        _FINALIZE_COLOR_CHANGE_LOAD
    {% elif upper_detected %}
        RESPOND MSG="Loading filament to hotend"
        _EXTRUDE_TO_HOTEND CONTEXT=color_change
    {% else %}
        RESPOND MSG="‚ö†Ô∏è Insert filament - waiting for detection"
        _WAIT_FOR_INSERTION CONTEXT=color_change
    {% endif %}

####################################################################################################
############################ UNIFIED FILAMENT EXTRUSION SYSTEM #####################################
####################################################################################################

[gcode_macro _EXTRUDE_TO_HOTEND]
description: Universal filament extrusion with dual sensor validation
variable_extrusion_count: 0
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set CONTEXT = params.CONTEXT|default("unknown") %}
    {% set extrusion_increment = macrocfg.filament_load_increment %}
    {% set fast_speed = macrocfg.filament_m600_fast_speed %}
    {% set max_extrusions = macrocfg.filament_max_extrusion_distance %}
    
    # Check extrusion safety limit
    {% if printer["gcode_macro _EXTRUDE_TO_HOTEND"].extrusion_count >= max_extrusions %}
        RESPOND MSG="‚ùå SAFETY STOP: Extruded {max_extrusions}mm without dual sensor detection"
        RESPOND MSG="‚ö†Ô∏è Check sensor connections or run LOAD_FILAMENT again"
        SET_GCODE_VARIABLE MACRO=_EXTRUDE_TO_HOTEND VARIABLE=extrusion_count VALUE=0
        {% if CONTEXT == "print_start" %}
            _FINALIZE_PRINT_START_LOAD DID_LOADING=1
        {% else %}
            _FINALIZE_COLOR_CHANGE_LOAD
        {% endif %}
    {% else %}
        # Incremental extrusion toward lower sensor
        G91   
        G1 E{extrusion_increment} F{fast_speed}
        G90
        
        # Update safety counter
        SET_GCODE_VARIABLE MACRO=_EXTRUDE_TO_HOTEND VARIABLE=extrusion_count VALUE={printer["gcode_macro _EXTRUDE_TO_HOTEND"].extrusion_count + extrusion_increment}
        
        # Check if BOTH sensors now detect (not just lower)
        {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
        {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
        
        {% if upper_detected and lower_detected %}
            RESPOND MSG="Both sensors detect - Filament properly positioned ({printer['gcode_macro _EXTRUDE_TO_HOTEND'].extrusion_count}mm)"
            SET_GCODE_VARIABLE MACRO=_EXTRUDE_TO_HOTEND VARIABLE=extrusion_count VALUE=0  # Reset counter
            {% if CONTEXT == "print_start" %}
                _FINALIZE_PRINT_START_LOAD DID_LOADING=1
            {% else %}
                _FINALIZE_COLOR_CHANGE_LOAD
            {% endif %}
        {% else %}
            # Continue extruding - use context-specific delayed gcode
            UPDATE_DELAYED_GCODE ID=EXTRUDE_TO_HOTEND_{CONTEXT|upper} DURATION={macrocfg.filament_extrusion_delay}
        {% endif %}
    {% endif %}

# Context-specific delayed gcode handlers
[delayed_gcode EXTRUDE_TO_HOTEND_PRINT_START]
gcode:
    _EXTRUDE_TO_HOTEND CONTEXT=print_start

[delayed_gcode EXTRUDE_TO_HOTEND_COLOR_CHANGE]
gcode:
    _EXTRUDE_TO_HOTEND CONTEXT=color_change

####################################################################################################
############################ UNIFIED FILAMENT INSERTION WAITING ####################################
####################################################################################################

[gcode_macro _WAIT_FOR_INSERTION]
description: Universal filament insertion detection with loading status
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set CONTEXT = params.CONTEXT|default("unknown") %}
    {% set grab_distance = macrocfg.filament_grab_distance %}
    {% set fast_speed = macrocfg.filament_m600_fast_speed %}
    
    # Attempt to grab any inserted filament
    G91   
    G1 E{grab_distance} F{fast_speed}
    G90
    
    # Check if filament reached upper sensor
    {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
    {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
    {% if upper_detected %}
        RESPOND MSG="Filament detected, loading..."
        _SET_LED_STATUS STATUS=standby
        _EXTRUDE_TO_HOTEND CONTEXT={CONTEXT}                   # This will pass DID_LOADING=1 when complete
    {% else %}
        # Continue waiting
        UPDATE_DELAYED_GCODE ID=WAIT_FOR_INSERTION_{CONTEXT|upper} DURATION={macrocfg.filament_insertion_check_delay}
    {% endif %}

# Context-specific delayed gcode handlers
[delayed_gcode WAIT_FOR_INSERTION_PRINT_START]
gcode:
    _WAIT_FOR_INSERTION CONTEXT=print_start

[delayed_gcode WAIT_FOR_INSERTION_COLOR_CHANGE]
gcode:
    _WAIT_FOR_INSERTION CONTEXT=color_change

####################################################################################################
################################ SMART PURGE FINALIZATION ##########################################
####################################################################################################

[gcode_macro _FINALIZE_PRINT_START_LOAD]
description: Complete print start loading with conditional extrusion
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set DID_LOADING = params.DID_LOADING|default(0)|int %}
    {% set fast_speed = macrocfg.filament_m600_slow_speed %}
    
    # Cancel any pending operations
    UPDATE_DELAYED_GCODE ID=EXTRUDE_TO_HOTEND_PRINT_START DURATION=0
    UPDATE_DELAYED_GCODE ID=WAIT_FOR_INSERTION_PRINT_START DURATION=0
    
    # Only do post-load extrusion if we actually loaded filament
    {% if DID_LOADING == 1 %}
        G91
        G1 E{macrocfg.post_filament_load} F{fast_speed}
        G90
    {% else %}
        RESPOND MSG="‚úÖ Filament already positioned"
    {% endif %}
    
    RESPOND MSG="‚úÖ Print start loading complete"
    _SET_LED_STATUS STATUS=standby
    
    # Resume print start sequence
    RESUME_BASE

[gcode_macro _FINALIZE_COLOR_CHANGE_LOAD]
description: Complete color change loading with smart purge selection
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set fast_speed = macrocfg.filament_m600_slow_speed %}
    
    # Cancel any pending operations
    UPDATE_DELAYED_GCODE ID=EXTRUDE_TO_HOTEND_COLOR_CHANGE DURATION=0
    UPDATE_DELAYED_GCODE ID=WAIT_FOR_INSERTION_COLOR_CHANGE DURATION=0
    
    # Final loading
    G91
    G1 E{macrocfg.post_filament_load} F{fast_speed}
    G90
    
    # Purge selection logic with automation override
    {% if macrocfg.auto_color_change == 1 %}
        RESPOND MSG="Automated swap mode - Purging on bed"
        {% if macrocfg.purging == True %}
            {macrocfg.purge_macro}                              # Always nozzle purge for automation
        {% endif %}
        {% set force_printing_status = True %}                  # Treat as printing for LED status
    
        # Auto-resume for automated color changes
        RESPOND MSG="Auto-resuming print after automated color change"
        RESUME                                                  # Automatically continue printing
    
    {% else %}
        # Get current print state for smart purge selection
        _GET_PRINT_STATE
        {% set currently_printing = macrocfg.currently_printing %}
        {% set force_printing_status = currently_printing == 1 %}
        {% if currently_printing == 1 %}
            RESPOND MSG="Manual swap mode - Purging in air"
            {% set travel_speed = macrocfg.travel_speed %}
            G0 X{macrocfg.filament_park_x} Y{macrocfg.filament_park_y} F{travel_speed}
            M400
            _PURGE                                              # Simple in-air purge
        {% else %}
            {% if macrocfg.purging == True %}
                {macrocfg.purge_macro}                          # Full nozzle purge on bed
            {% endif %}
        {% endif %}
   {% endif %}
    
    # Cleanup and status
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filament_m600_coldstart VALUE=0
    
    {% if macrocfg.led_status == True %}
        {% if force_printing_status %}
            _SET_LED_STATUS STATUS=printing
        {% else %}
            _SET_LED_STATUS STATUS=standby
        {% endif %}
    {% endif %}
    
    RESPOND MSG="‚úÖ Filament loading complete"

####################################################################################################
############################ IMPROVED FILAMENT INSERTION HANDLER ###################################
####################################################################################################

[gcode_macro _FILAMENT_INSERT_HANDLER]
description: Smart filament insertion handler with context awareness
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="Filament insertion detected"
    
    # Check context and route appropriately
    {% if macrocfg.starting_print == 1 %}
        # Print start context - let print start sequence handle it
        RESPOND MSG="Print start in progress - automatic handling active"
    {% elif macrocfg.auto_load == True %}
        # Normal auto-load for color changes
        RESPOND MSG="Auto-loading filament"
        LOAD_FILAMENT
    {% else %}
        # Manual load required
        RESPOND MSG="‚ö†Ô∏è Run LOAD_FILAMENT to complete loading"
    {% endif %}

####################################################################################################
################################ SIMPLIFIED DEBUG MACRO ############################################
####################################################################################################

[gcode_macro _DEBUG_PRINT_STATE]
description: Debug current print state detection
gcode:
    _GET_PRINT_STATE
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    RESPOND MSG="=== PRINT STATE DEBUG ==="
    RESPOND MSG="print_stats.state: {printer.print_stats.state}"
    RESPOND MSG="virtual_sdcard.is_active: {printer.virtual_sdcard.is_active}"
    RESPOND MSG="virtual_sdcard.progress: {printer.virtual_sdcard.progress}"
    RESPOND MSG="print_stats.filename: {printer.print_stats.filename}"
    RESPOND MSG="print_stats.total_duration: {printer.print_stats.total_duration}"
    RESPOND MSG="currently_printing (detected): {macrocfg.currently_printing}"
    RESPOND MSG="starting_print flag: {macrocfg.starting_print}"
    RESPOND MSG="========================="


####################################################################################################
################################### FILAMENT CUTTING ###############################################
####################################################################################################

[gcode_macro _FILAMENT_CUT]
description: Cut filament using gantry depressor
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Calculate clean variables first
    {% set safe_z = macrocfg.filament_cut_safe_z %}
    {% set safe_x = macrocfg.filament_cut_safe_x %}
    {% set safe_y = macrocfg.filament_cut_safe_y %}
    {% set init_x = macrocfg.filament_cut_init_x %}
    {% set init_y = macrocfg.filament_cut_init_y %}
    {% set cut_y = macrocfg.filament_cut_y %}
    {% set cut_retract = macrocfg.filament_cut_retract %}
    {% set cut_speed = macrocfg.filament_cut_speed %}
    {% set approach_speed = macrocfg.filament_cut_approach_speed %}
    {% set retract_speed = macrocfg.filament_cut_retract_speed %}
    
    G91                                                         # Relative positioning
    G1 Z{safe_z} F{cut_speed}                                   # Safe Z clearance
    G90                                                         # Absolute positioning

    G1 X{safe_x} Y{safe_y} F{approach_speed}                    # Move to start position
    G1 X{init_x} Y{init_y} F{approach_speed}                    # Position for cut
    G1 Y{cut_y} F{cut_speed}                                    # Execute cutting motion

    G91                                                         # Relative for retraction
    G1 E{cut_retract} F{retract_speed}                          # Retract cut filament
    G90                                                         # Back to absolute

    G1 Y{init_y} F{approach_speed}                              # Clear cut area
    G1 X{safe_x} Y{safe_y} F{approach_speed}                    # Return to safe position


####################################################################################################
#################################### NOZZLE CLEANING ###############################################
####################################################################################################

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle on silicone brush
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set nozzle_targ = params.TARGET|default(0)|float %}
    {% set is_hot = macrocfg.nozzle_clean_hot %}
    
    # Calculate clean variables first
    {% set clean_x = macrocfg.nozzle_clean_x %}
    {% set clean_y = macrocfg.nozzle_clean_y %}
    {% set clean_z = macrocfg.nozzle_clean_z %}
    {% set wipe_distance = macrocfg.nozzle_clean_wipe_distance %}
    {% set wipe_quantity = macrocfg.nozzle_clean_wipe_quantity %}
    {% set wipe_speed = macrocfg.nozzle_clean_wipe_speed %}
    {% set travel_speed = macrocfg.travel_speed %}
    {% set z_speed = macrocfg.nozzle_clean_z_speed %}
    
    _CG28                                                       # Home if needed
    
    # Temperature control logic
    {% if params.HEAT is defined %}
        {% set is_hot = False if params.HEAT|lower == 'true' else True if params.HEAT|lower == 'false' else is_hot %}
    {% endif %}
    
    {% if is_hot == False %}
        _SET_LED_STATUS STATUS=heating
        RESPOND MSG="üî• Heating extruder for cleaning"
        {% if nozzle_targ > 0 %}
            M109 S{nozzle_targ}
        {% elif macrocfg.nozzle_clean_temp > 0 %}
            M109 S{macrocfg.nozzle_clean_temp}
        {% endif %}
    {% endif %}

    RESPOND MSG="Brushing nozzle"
    
    G90                                                         # Absolute positioning
    
    # Position for cleaning
    G0 X{clean_x} Y{clean_y} F{travel_speed}                    # Move to clean position
    G0 Z{clean_z} F{z_speed}                                    # Lower to cleaning height
    M400
    
    # Execute cleaning wipes
    {% for wipes in range(1, (wipe_quantity + 1)) %}
        G0 X{clean_x + wipe_distance} F{wipe_speed}
        G0 X{clean_x} F{wipe_speed}
    {% endfor %}
    
    # Post-cleaning procedures
    {% if is_hot == False %}
        RESPOND MSG="‚ùÑÔ∏è Cooling extruder"
        M104 S0                                                 # Turn off heater
    {% endif %}
    
    {% if macrocfg.post_clean_home == True %}
        G28 Z                                                   # Re-home Z if configured
    {% endif %}
    
    _SET_LED_STATUS STATUS=standby

    M400
    RESPOND MSG="‚úÖ Nozzle cleaning complete"


####################################################################################################
####################################### PURGE OPERATIONS ###########################################
####################################################################################################

[gcode_macro _PURGE]
description: Purge filament at current position
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    {% set LENGTH = params.LENGTH|default(macrocfg.filament_m600_purge_length)|float %}
    
    # Temperature management
    {% set cur_temp = printer.extruder.temperature|float %}
    {% set cur_targ = printer.extruder.target|int %}
    {% set TARGET = macrocfg.filament_m600_prev_temp if macrocfg.filament_m600_prev_temp != 0 else params.TARGET|default(cur_targ)|int %}
    
    {% if printer.extruder.target < config.extruder.min_extrude_temp|int %}
        {% set TARGET = macrocfg.filament_m600_default_temp %}
    {% endif %}
    
    _SET_LED_STATUS STATUS=heating
    
    RESPOND MSG="üî• Heating nozzle for purge"
    M109 S{TARGET}
    M400
    
    _SET_LED_STATUS STATUS=printing

    RESPOND MSG="Purging in air"
    
    # Calculate clean speed variables
    {% set purge_speed = macrocfg.filament_m600_slow_speed %}
    {% set retract_speed = macrocfg.filament_m600_fast_speed %}
    {% set pause_time = macrocfg.purge_pause_time %}
    
    G91                                                         # Relative positioning
    G1 E{LENGTH} F{purge_speed}                                 # Purge extrusion
    G1 E-{macrocfg.purge_retract} F{retract_speed}              # Retraction
    G90                                                         # Absolute positioning
    M400

    M106 S{macrocfg.purge_cooling_fan_speed}                    # Cooling fan on
    G4 P{pause_time}                                            # Cooling wait
    M106 S0                                                     # Cooling fan off
    G1 E-{macrocfg.purge_mini_retract} F{retract_speed}         # Mini Retraction

    
    M109 S{cur_targ}                                            # Restore temperature
    RESPOND MSG="‚úÖ Purge complete"
    
    _SET_LED_STATUS STATUS=standby


[gcode_macro _NOZZLE_PURGE]
description: Advanced nozzle purge with positioning and waste management
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    {% set TARGET = params.TARGET|default(macrocfg.filament_m600_default_temp)|float %}

    # Temperature management and validation
    {% set cur_temp = printer.extruder.temperature|float %}
    {% set cur_targ = printer.extruder.target|int %}
    {% set min_extrude = config.extruder.min_extrude_temp|int if config.extruder.min_extrude_temp is defined else macrocfg.min_extrude_temp %}
    
    {% if macrocfg.filament_m600_prev_temp != 0 %}
        {% set TARGET = macrocfg.filament_m600_prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %}
        {% set TARGET = params.TARGET|int|default(macrocfg.filament_m600_default_temp) %}
    {% endif %}
    
    # Heat nozzle if needed
    {% if cur_temp < (TARGET - macrocfg.temp_tolerance) %}
        _SET_LED_STATUS STATUS=heating
        RESPOND MSG="üî• Nozzle heating for bed purge"
        M109 S{TARGET}
    {% endif %}

    _SET_LED_STATUS STATUS=standby
    
    # Calculate clean variables first
    {% set purge_x = macrocfg.purge_x %}
    {% set purge_y = macrocfg.purge_y %}
    {% set purge_z_offset = macrocfg.purge_z_offset %}
    {% set travel_speed = macrocfg.travel_speed %}
    {% set purge_prime = macrocfg.purge_prime %}
    {% set z_height_1 = macrocfg.purge_z_height_1 %}
    {% set z_height_2 = macrocfg.purge_z_height_2 %}
    {% set z_height_3 = macrocfg.purge_z_height_3 %}
    {% set extrude_1 = macrocfg.purge_extrude_1 %}
    {% set extrude_2 = macrocfg.purge_extrude_2 %}
    {% set mid_retract = macrocfg.purge_mid_retract %}
    {% set pause_time = macrocfg.purge_pause_time %}
    {% set cleanup_x = macrocfg.cleanup_x %}
    {% set cleanup_y = macrocfg.cleanup_y %}
    {% set purge_slow_speed_1 = macrocfg.purge_slow_speed_1 %}
    {% set purge_slow_speed_2 = macrocfg.purge_slow_speed_2 %}
    {% set purge_slow_speed_3 = macrocfg.purge_slow_speed_3 %}
    {% set retract_speed = macrocfg.filament_m600_fast_speed %}
    
    # Initial positioning
    G92 E0                                                      # Reset extruder
    G90                                                         # Absolute positioning
    G1 X{purge_x} Y{purge_y} Z{purge_z_offset + macrocfg.purge_z_clearance} F{travel_speed}
    G1 Z0 F{travel_speed}                                       # Lower to bed

    # Purge sequence
    RESPOND MSG="Purging on bed"

    # Calculate priming amount based on previous operations
    {% if macrocfg.flag_end_unload == True %}
        {% set purge_prime = macrocfg.filament_m600_unload_length %}
    {% else %}
        {% set purge_prime = macrocfg.end_retract_length if macrocfg.flag_end_retract == True else 0 %}
    {% endif %}
    
    G1 Z0 E{purge_prime} F{purge_slow_speed_1}                  # Slow base formation
    G1 Z{z_height_1} E{extrude_1} F{purge_slow_speed_2}         # Build height gradually
    G1 Z{z_height_2} E{extrude_2} F{purge_slow_speed_3}         # Final height
    G91                                                         # Relative positioning
    G1 E-{mid_retract} F{retract_speed}                         # Pressure relief
    G90                                                         # Absolute positioning
    G1 Z{z_height_3} F{macrocfg.purge_z_lift_speed}             # Clean detachment
    
    M106 S{macrocfg.purge_cooling_fan_speed}                    # Cooling fan
    G4 P{pause_time}                                            # Cooling period
    M106 S0                                                     # Fan off

    # Waste management
    RESPOND MSG="Discarding purge"
    G1 X{cleanup_x} Y{cleanup_y} F{macrocfg.purge_cleanup_speed}  # Position for cleanup
    G1 Z{purge_z_offset} F{macrocfg.purge_z_speed}              # Lower for push
    G1 Y{purge_y} F{macrocfg.purge_cleanup_speed}               # Push waste into bucket
    G91                                                         # Relative positioning
    G1 Z{purge_z_offset + macrocfg.purge_final_lift} F{macrocfg.purge_z_speed}  # Slight lift
    G90                                                         # Absolute positioning
    G92 E0                                                      # Reset extruder

    M400
    RESPOND MSG="‚úÖ Purge complete"


####################################################################################################
################################## FILAMENT PARKING ################################################
####################################################################################################

[gcode_macro _FILAMENT_PARK]
description: Park toolhead for filament operations
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    # Determine parking position
    {% if macrocfg.filament_park_x is defined and macrocfg.filament_park_y is defined %}
        {% set park_x = macrocfg.filament_park_x %}
        {% set park_y = macrocfg.filament_park_y %}
    {% else %}
        {% set park_x = macrocfg.park_x %}
        {% set park_y = macrocfg.park_y %}
    {% endif %}
    
    RESPOND MSG="Parking toolhead for filament operation"
    
    # Save current temperature
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filament_m600_prev_temp VALUE={printer.extruder.target}
    
    # Execute parking with Z safety check
    G91                                                         # Relative positioning
    {% if printer.toolhead.position.z|float + macrocfg.park_z|float < config["stepper_z"]["position_max"]|float %}
        {% if printer.toolhead.position.z < macrocfg.park_zmin|int %}
            G0 Z{macrocfg.park_zmin|int - printer.toolhead.position.z|int}
        {% else %}
            G0 Z{macrocfg.park_z|int}
        {% endif %}
    {% endif %}
    G90                                                         # Absolute positioning


####################################################################################################
################################# FILAMENT RUNOUT HANDLING #########################################
####################################################################################################

[gcode_macro _FILAMENT_RUNOUT]
description: Handle filament runout sensor trigger
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    {% if macrocfg.filament_m600_coldstart == 0 %}
        RESPOND MSG="‚ö†Ô∏è Filament runout detected"
        
        SET_IDLE_TIMEOUT TIMEOUT={macrocfg.filament_m600_idle_time}
        
        {% if macrocfg.audio_status == True %}
            {macrocfg.filament_m600_audio}
            _ALERT_BEEP_ON
        {% endif %}
        
        M600                                                    # Execute filament change
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filament_m600_prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=runout VALUE=1
        
        {% if macrocfg.auto_unload == True %}
            RESPOND MSG="Auto-unloading filament"
            {% set unload_speed = macrocfg.filament_m600_unload_speed %}
            G91                                                 # Relative positioning
            G1 E-{macrocfg.filament_m600_unload_length} F{unload_speed}
            G90 
        {% else %}
            {% if macrocfg.use_fluidd == True and macrocfg.filament_m600_coldstart == 0 %}
                RESPOND MSG="‚ö†Ô∏è Run UNLOAD_FILAMENT to unload"
                {% if macrocfg.audio_status == True and macrocfg.audio_frequency > 0 %}
                    RESPOND MSG="‚ö†Ô∏è Run _ALERT_BEEP_OFF to silence beeper"
                {% endif %}
            {% endif %}
            M109 S0                                             # Turn off extruder
        {% endif %}
    {% endif %}


####################################################################################################
################################ FILAMENT SENSOR CONTROL ###########################################
####################################################################################################

[delayed_gcode _AUTO_DISABLE_FILAMENT_SENSOR]
initial_duration: 1
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% if macrocfg.auto_filament_sensor == True %}
        SET_FILAMENT_SENSOR SENSOR={macrocfg.upper_filament_sensor} ENABLE=0
        SET_FILAMENT_SENSOR SENSOR={macrocfg.lower_filament_sensor} ENABLE=0
    {% endif %}


[gcode_macro _ENABLE_FILAMENT_SENSOR]
description: Enable filament sensors with delay
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    UPDATE_DELAYED_GCODE ID=_DELAYED_FILAMENT_SENSOR DURATION={macrocfg.auto_filament_delay}

[delayed_gcode _DELAYED_FILAMENT_SENSOR]
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set UPPER_SENSOR = macrocfg.upper_filament_sensor %}
    {% set LOWER_SENSOR = macrocfg.lower_filament_sensor %}
    
    RESPOND MSG="Enabling filament sensors"
    SET_FILAMENT_SENSOR SENSOR={UPPER_SENSOR} ENABLE=1
    SET_FILAMENT_SENSOR SENSOR={LOWER_SENSOR} ENABLE=1


[gcode_macro _DISABLE_FILAMENT_SENSOR]
description: Disable filament sensors immediately
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set UPPER_SENSOR = macrocfg.upper_filament_sensor %}
    {% set LOWER_SENSOR = macrocfg.lower_filament_sensor %}
    
    RESPOND MSG="Disabling filament sensors"
    SET_FILAMENT_SENSOR SENSOR={UPPER_SENSOR} ENABLE=0
    SET_FILAMENT_SENSOR SENSOR={LOWER_SENSOR} ENABLE=0


####################################################################################################
############################# CENTRAL SUPPORT FUNCTIONS ########################################
####################################################################################################

[gcode_macro _DETECT_FILAMENT_SENSORS]
description: Centralized filament sensor state detection
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Get sensor states
    {% set upper_detected = printer["filament_switch_sensor " + macrocfg.upper_filament_sensor].filament_detected %}
    {% set lower_detected = printer["filament_switch_sensor " + macrocfg.lower_filament_sensor].filament_detected %}
    
    # Store states for calling macro to use
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=upper_sensor_state VALUE={1 if upper_detected else 0}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=lower_sensor_state VALUE={1 if lower_detected else 0}
    
    RESPOND MSG="DEBUG: Sensor states - Upper: {upper_detected}, Lower: {lower_detected}"


[gcode_macro _MANAGE_PRINT_STATE]
description: Centralized print state management for filament operations
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set STATE = params.STATE|default('unknown')|lower %}
    
    {% if STATE == 'start' %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=starting_print VALUE=1
        RESPOND MSG="Print state: Starting"
    {% elif STATE == 'end' %}
        SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=starting_print VALUE=0
        RESPOND MSG="Print state: Ending"
    {% elif STATE == 'pause' %}
        # Handle pause state logic
        RESPOND MSG="Print state: Paused"
    {% elif STATE == 'resume' %}
        # Handle resume state logic
        RESPOND MSG="Print state: Resuming"
    {% endif %}
