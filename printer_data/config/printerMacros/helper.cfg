####################################################################################################
#################################### CONFIGURATION BACKUP ##########################################
####################################################################################################

[gcode_shell_command BACKUP_CFG]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backup configuration directory to GitHub
gcode:
    RESPOND MSG="Backing up configs to GitHub"
    RUN_SHELL_COMMAND CMD=BACKUP_CFG


####################################################################################################
#################################### MAINTENANCE POSITIONING #######################################
####################################################################################################

[gcode_macro MAINTENANCE]
description: Position toolhead for maintenance access
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    # Calculate clean positioning coordinates first
    {% set max_x = config["stepper_x"]["position_max"]|float %}
    {% set max_y = config["stepper_y"]["position_max"]|float %}
    {% set max_z = config["stepper_z"]["position_max"]|float %}
    {% set mid_x = max_x / 2.0 %}
    {% set mid_y = max_y / 2.0 %}
    {% set mid_z = max_z / 2.0 %}
    {% set travel_speed = macrocfg.travel_speed %}
    {% set maintenance_pause = macrocfg.maintenance_pause_time %}
    
    # Use configured maintenance position or default to center
    {% if macrocfg.maintenance_x < 0 or macrocfg.maintenance_y < 0 or macrocfg.maintenance_z < 0 %}
        {% set move_x = mid_x %}
        {% set move_y = mid_y %}
        {% set move_z = mid_z %}
    {% else %}
        {% set move_x = macrocfg.maintenance_x %}
        {% set move_y = macrocfg.maintenance_y %}
        {% set move_z = macrocfg.maintenance_z %}
    {% endif %}
    
    _SET_LED_STATUS STATUS=busy
    
    _CG28
    G0 X{move_x} Y{move_y} Z{move_z} F{travel_speed}
    G4 P{maintenance_pause}
    M400
    
    RESPOND MSG="Maintenance position reached"
    
    _SET_LED_STATUS STATUS=ready


####################################################################################################
####################################### IDLE MANAGEMENT ############################################
####################################################################################################

[gcode_macro _IDLER]
description: Set printer to idle state with configurable shutdowns
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set POWER = macrocfg.idle_power|lower %}
    {% set BED = macrocfg.idle_bed|lower %}
    {% set EXTRUDER = macrocfg.idle_extruder|lower %}
    {% set CHAMBER = macrocfg.idle_chamber|lower %}
    {% set STEPPERS = macrocfg.idle_steppers|lower %}
    
    RESPOND MSG="💤 Entering idle mode"
    
    # Complete power shutdown sequence
    {% if POWER == 'true' %}
        M84                                                     # Disable steppers  
        TURN_OFF_HEATERS                                        # Turn off all heaters
        {macrocfg.off_macro}                                    # Execute power off macro
    {% endif %}
    
    # Individual component shutdowns
    {% if STEPPERS == 'true' %}
        M84                                                     # Disable steppers only
    {% endif %}
    
    {% if BED == 'true' %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed                # Turn off bed heater
    {% endif %}
    
    {% if EXTRUDER == 'true' %}
        SET_HEATER_TEMPERATURE HEATER=extruder                  # Turn off extruder heater
    {% endif %}
    
    {% if CHAMBER == 'true' %}
        _SET_CHAMBER TARGET=0 SPEED=0                           # Turn off chamber heating/circulation
    {% endif %}


####################################################################################################
################################### EMERGENCY PROCEDURES ###########################################
####################################################################################################

[gcode_macro _UNSAFE_RAISE_TOOL]
description: Emergency Z-raise without homing (use with caution)
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set z = params.Z|default(macrocfg.emergency_z_raise)|float %}
    {% set f = params.F|default(macrocfg.emergency_z_speed)|float %}
    
    RESPOND MSG="⚠️ EMERGENCY: Raising toolhead {z}mm without homing"
    
    G90
    SET_KINEMATIC_POSITION Z=0                                 # Set current Z position as zero
    G0 Z{z} F{f}                                               # Move Z up by specified amount
    M84                                                        # Disable steppers for safety
    

####################################################################################################
################################## CHAMBER CONFIGURATION CONTROL ###################################
####################################################################################################

[gcode_macro _SET_CHAMBER]
description: Configure chamber heating and soaking parameters
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Parameter collection with defaults
    {% set chamber = params.USE_CHAMBER | default(macrocfg.chamber) | int %}
    {% set chamber_temp = params.CHAMBER_TEMP | default(macrocfg.chamber_temp) | float %}
    {% set chamber_time = params.CHAMBER_TIME | default(macrocfg.chamber_time) | int %}
    {% set bed_temp = params.BED_TEMP | default(macrocfg.bed_temp) | float %}
    {% set chamber_type = params.CHAMBER_TYPE | default(macrocfg.chamber_type) | string %}
    {% set chamber_name = params.CHAMBER_NAME | default(macrocfg.chamber_name) | string %}
    {% set heat_soak = params.HEAT_SOAK | default(macrocfg.heat_soak) | int %}
    {% set time_soak = params.TIME_SOAK | default(macrocfg.time_soak) | int %}
    {% set temp_soak = params.TEMP_SOAK | default(macrocfg.temp_soak) | int %}
    
    # String to boolean conversions
    {% if params.USE_CHAMBER is defined and params.USE_CHAMBER | lower == 'true' %}
        {% set chamber = 1 %}
    {% elif params.USE_CHAMBER is defined and params.USE_CHAMBER | lower == 'false' %}
        {% set chamber = 0 %}
    {% endif %}
    
    {% if params.TIME_SOAK is defined and params.TIME_SOAK | lower == 'true' %}
        {% set time_soak = 1 %}
    {% elif params.TIME_SOAK is defined and params.TIME_SOAK | lower == 'false' %}
        {% set time_soak = 0 %}
    {% endif %}
    
    {% if params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'true' %}
        {% set heat_soak = 1 %}
    {% elif params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'false' %}
        {% set heat_soak = 0 %}
    {% endif %}
    
    {% if params.TEMP_SOAK is defined and params.TEMP_SOAK | lower == 'true' %}
        {% set temp_soak = 1 %}
    {% elif params.TEMP_SOAK is defined and params.TEMP_SOAK | lower == 'false' %}
        {% set temp_soak = 0 %}
    {% endif %}
    
    # Apply chamber configuration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber VALUE={chamber}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_temp VALUE={chamber_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_time VALUE={chamber_time}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_type VALUE="{chamber_type}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_name VALUE="{chamber_name}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=heat_soak VALUE={heat_soak}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=time_soak VALUE={time_soak}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=temp_soak VALUE={temp_soak}


[gcode_macro _SET_CHAMBER_CONTROL]
description: Internal chamber control for multiple sensor types
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set config = printer.configfile.settings %}
    
    # Parameter processing
    {% set TEMP = params.TEMP | default(0) | float %}
    {% set WAIT = params.WAIT | default('false') | lower %}
    {% set SPEED = params.SPEED | default(0) | float %}
    {% set chamber = macrocfg.chamber_type + ' ' + macrocfg.chamber_name %}
    {% set temp_tolerance = macrocfg.chamber_temp_tolerance %}
    
    # Chamber control based on sensor type
    {% if macrocfg.chamber_type == 'generic_fan' %}
        SET_FAN_SPEED FAN={macrocfg.chamber_name} SPEED={SPEED}
    
    {% elif macrocfg.chamber_type == 'temperature_fan' %}
        SET_TEMPERATURE_FAN_TARGET temperature_fan={macrocfg.chamber_name} TARGET={TEMP}
        {% if WAIT == 'true' %}
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP + temp_tolerance}
        {% endif %}
        SET_FAN_SPEED FAN={macrocfg.chamber_name} SPEED={SPEED}
    
    {% elif macrocfg.chamber_type == 'heater' %}
        SET_HEATER_TEMPERATURE HEATER={macrocfg.chamber_name} TARGET={TEMP}
        {% if WAIT == 'true' %}
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP + temp_tolerance}
        {% endif %}
    
    {% elif macrocfg.chamber_type == 'temperature_sensor' %}
        {% if WAIT == 'true' %}
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP + temp_tolerance}
        {% endif %}
    
    {% elif macrocfg.chamber_type == 'z_thermal_adjust' %}
        {% set chamber = macrocfg.chamber_type %}
        {% if WAIT == 'true' %}
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP + temp_tolerance}
        {% endif %}
    {% endif %}
    
    {% if macrocfg.debugging == True %}
        RESPOND MSG="🌡️ Chamber: {chamber} | Temp: {TEMP} | Wait: {WAIT} | Speed: {SPEED}"
    {% endif %}


####################################################################################################
##################################### BED FAN CONTROL MACROS #######################################
####################################################################################################

[gcode_macro _BEDFANSSLOW]
description: Set bed fans to slow speed
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set SLOW = macrocfg.bed_slow|float %}
    SET_FAN_SPEED FAN=bed_fan SPEED={SLOW}

[gcode_macro _BEDFANSFAST]
description: Set bed fans to fast speed
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set FAST = macrocfg.bed_fast|float %}
    SET_FAN_SPEED FAN=bed_fan SPEED={FAST}

[gcode_macro _BEDFANSOFF]
description: Turn off bed fans
gcode:
    SET_FAN_SPEED FAN=bed_fan SPEED=0


####################################################################################################
##################################### IDLE BEHAVIOR CONFIGURATION ##################################
####################################################################################################

[gcode_macro _SET_IDLER]
description: Configure idle timeout and component shutdown behavior
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Get current variable defaults
    {% set VAR_POWER = macrocfg.idle_power|lower %}
    {% set VAR_BED = macrocfg.idle_bed|lower %}
    {% set VAR_EXTRUDER = macrocfg.idle_extruder|lower %}
    {% set VAR_CHAMBER = macrocfg.idle_chamber|lower %}
    {% set VAR_STEPPERS = macrocfg.idle_steppers|lower %}
    {% set default_idle_time = macrocfg.idle_time %}
    
    # Process parameters with defaults
    {% set POWER = params.POWER|default(VAR_POWER)|lower %}
    {% set TIME = params.TIME|default(default_idle_time)|lower %}
    {% set BED = params.BED|default(VAR_BED)|lower %}
    {% set EXTRUDER = params.EXTRUDER|default(VAR_EXTRUDER)|lower %}
    {% set CHAMBER = params.CHAMBER|default(VAR_CHAMBER)|lower %}
    {% set STEPPERS = params.STEPPERS|default(VAR_STEPPERS)|lower %}
    
    # Apply idle configuration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=idle_power VALUE="{POWER}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=idle_bed VALUE="{BED}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=idle_extruder VALUE="{EXTRUDER}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=idle_chamber VALUE="{CHAMBER}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=idle_steppers VALUE="{STEPPERS}"


####################################################################################################
################################## PRINT START CONFIGURATION #######################################
####################################################################################################

[gcode_macro _SET_START_PRINT]
description: Configure print start parameters and behavior
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Temperature parameters
    {% set bed_temp = params.BED_TEMP | default(macrocfg.bed_temp) | float %}
    {% set extruder_temp = params.EXTRUDER_TEMP | default(macrocfg.extruder_temp) | float %}
    {% set extruder_pre_temp = params.EXTRUDER_PRE_TEMP | default(macrocfg.extruder_preheat_temp) | float %}
    {% set chamber_temp = params.CHAMBER_TEMP | default(macrocfg.chamber_temp) | float %}
    
    # Calibration parameters
    {% set heat_soak = params.HEAT_SOAK | default(macrocfg.heat_soak) | int %}
    {% set auto_z = params.AUTO_Z | default(macrocfg.auto_z_calibrate) | int %}
    {% set z_tilt = params.Z_TILT | default(macrocfg.z_tilt) | int %}
    {% set qgl = params.QUAD_GANTRY_LEVEL | default(macrocfg.qgl) | int %}
    
    # Bed mesh parameters
    {% set mesh = params.BED_MESH | default(macrocfg.bed_mesh) | int %}
    {% set adaptive_mesh = params.ADAPTIVE_MESH | default(macrocfg.mesh_adaptive) | int %}
    {% set load_mesh = params.LOAD_MESH | default(macrocfg.load_mesh) | int %}
    {% set mesh_profile = params.MESH_PROFILE | default(macrocfg.mesh_profile) | string %}
    
    # Cleaning and purging parameters
    {% set cleaning = params.NOZZLE_BRUSH | default(macrocfg.cleaning) | int %}
    {% set purging = params.NOZZLE_PURGE | default(macrocfg.purging) | int %}
    {% set adaptive_purge = params.ADAPTIVE_PURGE | default(macrocfg.adaptive_purge) | int %}
    {% set nevermore = params.USE_NEVERMORE | default(macrocfg.nevermore) | int %}
    
    # String to boolean conversions
    {% if params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'true' %}
        {% set heat_soak = 1 %}
    {% elif params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'false' %}
        {% set heat_soak = 0 %}
    {% endif %}
    
    {% if params.AUTO_Z is defined and params.AUTO_Z | lower == 'true' %}
        {% set auto_z = 1 %}
    {% elif params.AUTO_Z is defined and params.AUTO_Z | lower == 'false' %}
        {% set auto_z = 0 %}
    {% endif %}
    
    {% if params.Z_TILT is defined and params.Z_TILT | lower == 'true' %}
        {% set z_tilt = 1 %}
    {% elif params.Z_TILT is defined and params.Z_TILT | lower == 'false' %}
        {% set z_tilt = 0 %}
    {% endif %}
    
    {% if params.QUAD_GANTRY_LEVEL is defined and params.QUAD_GANTRY_LEVEL | lower == 'true' %}
        {% set qgl = 1 %}
    {% elif params.QUAD_GANTRY_LEVEL is defined and params.QUAD_GANTRY_LEVEL | lower == 'false' %}
        {% set qgl = 0 %}
    {% endif %}
    
    {% if params.BED_MESH is defined and params.BED_MESH | lower == 'true' %}
        {% set mesh = 1 %}
    {% elif params.BED_MESH is defined and params.BED_MESH | lower == 'false' %}
        {% set mesh = 0 %}
    {% endif %}
    
    {% if params.ADAPTIVE_MESH is defined and params.ADAPTIVE_MESH | lower == 'true' %}
        {% set adaptive_mesh = 1 %}
    {% elif params.ADAPTIVE_MESH is defined and params.ADAPTIVE_MESH | lower == 'false' %}
        {% set adaptive_mesh = 0 %}
    {% endif %}
    
    {% if params.LOAD_MESH is defined and params.LOAD_MESH | lower == 'true' %}
        {% set load_mesh = 1 %}
    {% elif params.LOAD_MESH is defined and params.LOAD_MESH | lower == 'false' %}
        {% set load_mesh = 0 %}
    {% endif %}
    
    {% if params.NOZZLE_BRUSH is defined and params.NOZZLE_BRUSH | lower == 'true' %}
        {% set cleaning = 1 %}
    {% elif params.NOZZLE_BRUSH is defined and params.NOZZLE_BRUSH | lower == 'false' %}
        {% set cleaning = 0 %}
    {% endif %}
    
    {% if params.NOZZLE_PURGE is defined and params.NOZZLE_PURGE | lower == 'true' %}
        {% set purging = 1 %}
    {% elif params.NOZZLE_PURGE is defined and params.NOZZLE_PURGE | lower == 'false' %}
        {% set purging = 0 %}
    {% endif %}
    
    {% if params.ADAPTIVE_PURGE is defined and params.ADAPTIVE_PURGE | lower == 'true' %}
        {% set adaptive_purge = 1 %}
    {% elif params.ADAPTIVE_PURGE is defined and params.ADAPTIVE_PURGE | lower == 'false' %}
        {% set adaptive_purge = 0 %}
    {% endif %}
    
    {% if params.USE_NEVERMORE is defined and params.USE_NEVERMORE | lower == 'true' %}
        {% set nevermore = 1 %}
    {% elif params.USE_NEVERMORE is defined and params.USE_NEVERMORE | lower == 'false' %}
        {% set nevermore = 0 %}
    {% endif %}
    
    # Apply all configuration variables
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=extruder_temp VALUE={extruder_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=extruder_preheat_temp VALUE={extruder_pre_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=chamber_temp VALUE={chamber_temp}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=heat_soak VALUE={heat_soak}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=auto_z_calibrate VALUE={auto_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=z_tilt VALUE={z_tilt}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=qgl VALUE={qgl}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=bed_mesh VALUE={mesh}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=mesh_adaptive VALUE={adaptive_mesh}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=load_mesh VALUE={load_mesh}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=mesh_profile VALUE="{mesh_profile}"
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=cleaning VALUE={cleaning}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=purging VALUE={purging}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=adaptive_purge VALUE={adaptive_purge}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nevermore VALUE={nevermore}


####################################################################################################
################################### DEFAULT SETTINGS MANAGEMENT ####################################
####################################################################################################

[gcode_macro _SET_DEFAULTS]
description: Reset printer settings to configured defaults
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set mode = params.MODE|default('none')|lower %}
    
    {% if mode == 'none' %}
        # Reset all defaults
        SET_GCODE_OFFSET Z={macrocfg.z_offset}
        M220 S{macrocfg.default_speed_factor}
    {% elif mode == 'start' %}
        # Reset only start-print defaults
        {% if macrocfg.start_z_offset == True %}
            SET_GCODE_OFFSET Z={macrocfg.z_offset}
        {% endif %}
        {% if macrocfg.start_speed_factor == True %}
            M220 S{macrocfg.default_speed_factor}
        {% endif %}
    {% elif mode == 'end' %}
        # Reset only end-print defaults
        {% if macrocfg.end_z_offset == True %}
            SET_GCODE_OFFSET Z={macrocfg.z_offset}
        {% endif %}
        {% if macrocfg.end_speed_factor == True %}
            M220 S{macrocfg.default_speed_factor}
        {% endif %}
    {% endif %}


####################################################################################################
################################## NOZZLE CLEANING CONFIGURATION ###################################
####################################################################################################

[gcode_macro _SET_NOZZLE_CLEANING]
description: Configure nozzle cleaning parameters and coordinates
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Cleaning coordinate parameters
    {% set nozzle_clean_x = params.X | default(macrocfg.nozzle_clean_x) | float %}
    {% set nozzle_clean_y = params.Y | default(macrocfg.nozzle_clean_y) | float %}
    {% set nozzle_clean_z = params.Z | default(macrocfg.nozzle_clean_z) | float %}
    {% set cleaning = params.USE_CLEAN | default(macrocfg.cleaning) | int %}
    
    # Temperature and behavior parameters
    {% set nozzle_clean_temp = params.TEMPERATURE | default(macrocfg.nozzle_clean_temp) | float %}
    {% set clean_probe = params.CLEAN_BEFORE_PROBING | default(macrocfg.clean_probe) | int %}
    {% set clean_end = params.CLEAN_AFTER_PRINT | default(macrocfg.clean_end) | int %}
    {% set post_clean_home = params.HOME_AFTER_CLEANING | default(macrocfg.post_clean_home) | int %}
    {% set clean_filament_m600 = params.CLEAN_AFTER_M600 | default(macrocfg.clean_filament_m600) | int %}
    
    # Cleaning motion parameters
    {% set nozzle_clean_wipe_quantity = params.WIPE_QUANTITY | default(macrocfg.nozzle_clean_wipe_quantity) | int %}
    {% set nozzle_clean_wipe_distance = params.WIPE_DISTANCE | default(macrocfg.nozzle_clean_wipe_distance) | float %}
    {% set nozzle_clean_wipe_speed = params.WIPE_SPEED | default(macrocfg.nozzle_clean_wipe_speed) | float %}
    {% set nozzle_clean_raise_distance = params.RAISE_DISTANCE | default(macrocfg.nozzle_clean_raise_distance) | float %}
    
    # Coordinate validation
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_min = printer.toolhead.axis_minimum.z %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    
    # Validate cleaning coordinates
    {% set coord_valid = True %}
    {% if nozzle_clean_x < x_min or nozzle_clean_x > x_max %}
        RESPOND MSG="❌ Cleaning X position out of range: {nozzle_clean_x}"
        {% set coord_valid = False %}
    {% endif %}
    {% if nozzle_clean_y < y_min or nozzle_clean_y > y_max %}
        RESPOND MSG="❌ Cleaning Y position out of range: {nozzle_clean_y}"
        {% set coord_valid = False %}
    {% endif %}
    {% if nozzle_clean_z < z_min or nozzle_clean_z > z_max %}
        RESPOND MSG="❌ Cleaning Z position out of range: {nozzle_clean_z}"
        {% set coord_valid = False %}
    {% endif %}
    
    {% if coord_valid %}
        RESPOND MSG="✅ Cleaning coordinates validated"
    {% endif %}
    
    # String to boolean conversions
    {% if params.USE_CLEAN is defined and params.USE_CLEAN | lower == 'true' %}
        {% set cleaning = 1 %}
    {% elif params.USE_CLEAN is defined and params.USE_CLEAN | lower == 'false' %}
        {% set cleaning = 0 %}
    {% endif %}
    
    {% if params.CLEAN_BEFORE_PROBING is defined and params.CLEAN_BEFORE_PROBING | lower == 'true' %}
        {% set clean_probe = 1 %}
    {% elif params.CLEAN_BEFORE_PROBING is defined and params.CLEAN_BEFORE_PROBING | lower == 'false' %}
        {% set clean_probe = 0 %}
    {% endif %}
    
    {% if params.CLEAN_AFTER_PRINT is defined and params.CLEAN_AFTER_PRINT | lower == 'true' %}
        {% set clean_end = 1 %}
    {% elif params.CLEAN_AFTER_PRINT is defined and params.CLEAN_AFTER_PRINT | lower == 'false' %}
        {% set clean_end = 0 %}
    {% endif %}
    
    {% if params.HOME_AFTER_CLEANING is defined and params.HOME_AFTER_CLEANING | lower == 'true' %}
        {% set post_clean_home = 1 %}
    {% elif params.HOME_AFTER_CLEANING is defined and params.HOME_AFTER_CLEANING | lower == 'false' %}
        {% set post_clean_home = 0 %}
    {% endif %}
    
    {% if params.CLEAN_AFTER_M600 is defined and params.CLEAN_AFTER_M600 | lower == 'true' %}
        {% set clean_filament_m600 = 1 %}
    {% elif params.CLEAN_AFTER_M600 is defined and params.CLEAN_AFTER_M600 | lower == 'false' %}
        {% set clean_filament_m600 = 0 %}
    {% endif %}
    
    # Apply cleaning configuration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=cleaning VALUE={cleaning}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=clean_probe VALUE={clean_probe}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=clean_end VALUE={clean_end}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=post_clean_home VALUE={post_clean_home}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=clean_filament_m600 VALUE={clean_filament_m600}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_x VALUE={nozzle_clean_x}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_y VALUE={nozzle_clean_y}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_z VALUE={nozzle_clean_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_wipe_quantity VALUE={nozzle_clean_wipe_quantity}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_wipe_distance VALUE={nozzle_clean_wipe_distance}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_wipe_speed VALUE={nozzle_clean_wipe_speed}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_raise_distance VALUE={nozzle_clean_raise_distance}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=nozzle_clean_temp VALUE={nozzle_clean_temp}


####################################################################################################
#################################### PARKING CONFIGURATION #########################################
####################################################################################################

[gcode_macro _SET_PARKING]
description: Configure toolhead parking coordinates and behavior
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # General parking parameters
    {% set park_x = params.X | default(macrocfg.park_x) | float %}
    {% set park_y = params.Y | default(macrocfg.park_y) | float %}
    {% set park_z = params.Z | default(macrocfg.park_z) | float %}
    {% set park_zmin = params.Z_MIN | default(macrocfg.park_zmin) | float %}
    {% set park_zrel = params.Z_RELATIVE | default(macrocfg.park_zrel) | float %}
    {% set park_speed = params.SPEED | default(macrocfg.park_speed) | float %}
    
    # Specialized parking parameters
    {% set preheat_x = params.PREHEAT_X | default(macrocfg.preheat_x) | float %}
    {% set preheat_y = params.PREHEAT_Y | default(macrocfg.preheat_y) | float %}
    {% set preheat_z = params.PREHEAT_Z | default(macrocfg.preheat_z) | float %}
    {% set maintenance_x = params.MAINT_X | default(macrocfg.maintenance_x) | float %}
    {% set maintenance_y = params.MAINT_Y | default(macrocfg.maintenance_y) | float %}
    {% set maintenance_z = params.MAINT_Z | default(macrocfg.maintenance_z) | float %}
    
    # Coordinate validation
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_min = printer.toolhead.axis_minimum.z %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    
    # Validate parking coordinates
    {% if park_x < x_min or park_x > x_max %}
        RESPOND MSG="❌ Park X position out of range: {park_x}"
    {% endif %}
    {% if park_y < y_min or park_y > y_max %}
        RESPOND MSG="❌ Park Y position out of range: {park_y}"
    {% endif %}
    {% if park_z < z_min or park_z > z_max %}
        RESPOND MSG="❌ Park Z position out of range: {park_z}"
    {% endif %}
    
    # Validate preheat coordinates
    {% if preheat_x < x_min or preheat_x > x_max %}
        RESPOND MSG="❌ Preheat X position out of range: {preheat_x}"
    {% endif %}
    {% if preheat_y < y_min or preheat_y > y_max %}
        RESPOND MSG="❌ Preheat Y position out of range: {preheat_y}"
    {% endif %}
    {% if preheat_z < z_min or preheat_z > z_max %}
        RESPOND MSG="❌ Preheat Z position out of range: {preheat_z}"
    {% endif %}
    
    # Validate maintenance coordinates if configured
    {% if maintenance_x != -1 and maintenance_y != -1 and maintenance_z != -1 %}
        {% if maintenance_x < x_min or maintenance_x > x_max %}
            RESPOND MSG="❌ Maintenance X position out of range: {maintenance_x}"
        {% endif %}
        {% if maintenance_y < y_min or maintenance_y > y_max %}
            RESPOND MSG="❌ Maintenance Y position out of range: {maintenance_y}"
        {% endif %}
        {% if maintenance_z < z_min or maintenance_z > z_max %}
            RESPOND MSG="❌ Maintenance Z position out of range: {maintenance_z}"
        {% endif %}
    {% endif %}
    
    # Apply parking configuration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_x VALUE={park_x}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_y VALUE={park_y}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_z VALUE={park_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_zmin VALUE={park_zmin}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_zrel VALUE={park_zrel}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=park_speed VALUE={park_speed}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=preheat_x VALUE={preheat_x}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=preheat_y VALUE={preheat_y}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=preheat_z VALUE={preheat_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=maintenance_x VALUE={maintenance_x}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=maintenance_y VALUE={maintenance_y}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=maintenance_z VALUE={maintenance_z}


####################################################################################################
##################################### HOMING CONFIGURATION #########################################
####################################################################################################

[gcode_macro _SET_HOMING]
description: Configure homing parameters and behavior
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    
    # Homing position parameters
    {% set homex = params.X | default(macrocfg.home_x) | float %}
    {% set homey = params.Y | default(macrocfg.home_y) | float %}
    
    # Homing speed parameters
    {% set travel_speed = params.TRAVEL_SPEED | default(macrocfg.home_travel_speed) | float %}
    {% set z_speed = params.Z_SPEED | default(macrocfg.home_z_speed) | float %}
    
    # Sensorless homing parameters
    {% set home_current = params.HOME_CURRENT | default(macrocfg.home_current) | float %}
    {% set home_retract = params.HOME_RETRACT | default(macrocfg.home_retract) | float %}
    {% set home_retract_speed = params.HOME_RETRACT_SPEED | default(macrocfg.home_retract_speed) | float %}
    
    # Z-lift parameters
    {% set pre_home_z = params.PRE_HOME_Z | default(macrocfg.pre_home_z) | float %}
    {% set post_home_z = params.POST_HOME_Z | default(macrocfg.post_home_z) | float %}
    
    # Sensorless homing flag
    {% set sensorless_homing = params.SENSORLESS_HOMING | default(macrocfg.sensorless_home) | int %}
    
    # String to boolean conversion
    {% if params.SENSORLESS_HOMING is defined and params.SENSORLESS_HOMING | lower == 'true' %}
        {% set sensorless_homing = 1 %}
    {% elif params.SENSORLESS_HOMING is defined and params.SENSORLESS_HOMING | lower == 'false' %}
        {% set sensorless_homing = 0 %}
    {% endif %}
    
    # Set home position first
    _SET_HOME_POSITION X={homex} Y={homey}
    
    # Apply all homing configuration
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_travel_speed VALUE={travel_speed}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_z_speed VALUE={z_speed}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_current VALUE={home_current}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_retract VALUE={home_retract}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_retract_speed VALUE={home_retract_speed}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=pre_home_z VALUE={pre_home_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=post_home_z VALUE={post_home_z}
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=sensorless_home VALUE={sensorless_homing}


[gcode_macro _SET_HOME_POSITION]
description: Set and validate new homing coordinates
gcode:
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    
    {% if params.X is defined and params.Y is defined %}
        {% set homex = params.X|float %}
        {% set homey = params.Y|float %}
        {% set valid = True %}
        
        # Coordinate validation
        {% if homex < x_min or homex > x_max %}
            RESPOND MSG="❌ Homing X position out of range: {homex}"
            {% set valid = False %}
        {% endif %}
        
        {% if homey < y_min or homey > y_max %}
            RESPOND MSG="❌ Homing Y position out of range: {homey}"
            {% set valid = False %}
        {% endif %}
        
        # Apply if valid
        {% if valid %}
            SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_x VALUE={homex}
            SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=home_y VALUE={homey}
            RESPOND MSG="✅ Homing position set: X={homex} Y={homey}"
        {% endif %}
    {% else %}
        RESPOND MSG="❌ Both X and Y parameters required"
    {% endif %}


####################################################################################################
############################# CENTRAL SUPPORT FUNCTIONS ########################################
####################################################################################################

[gcode_macro _EXECUTE_PARKING]
description: Centralized parking logic for different contexts
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set TYPE = params.TYPE|default('standard')|lower %}
    
    {% if TYPE == 'filament' %}
        # Use filament-specific parking coordinates
        {% set park_x = macrocfg.filament_park_x if macrocfg.filament_park_x is defined else macrocfg.park_x %}
        {% set park_y = macrocfg.filament_park_y if macrocfg.filament_park_y is defined else macrocfg.park_y %}
    {% elif TYPE == 'maintenance' %}
        # Use maintenance coordinates
        {% set park_x = macrocfg.maintenance_x if macrocfg.maintenance_x > 0 else macrocfg.park_x %}
        {% set park_y = macrocfg.maintenance_y if macrocfg.maintenance_y > 0 else macrocfg.park_y %}
    {% else %}
        # Standard parking coordinates
        {% set park_x = macrocfg.park_x %}
        {% set park_y = macrocfg.park_y %}
    {% endif %}
    
    {% set park_z = macrocfg.park_z %}
    {% set park_speed = macrocfg.park_speed %}
    
    RESPOND MSG="Parking toolhead for {TYPE} operation"
    
    # Save current temperature
    SET_GCODE_VARIABLE MACRO=_macroVariables VARIABLE=filament_m600_prev_temp VALUE={printer.extruder.target}
    
    # Execute parking with Z safety check
    {% set config = printer.configfile.settings %}
    G91                                                         # Relative positioning
    {% if printer.toolhead.position.z|float + park_z|float < config["stepper_z"]["position_max"]|float %}
        {% if printer.toolhead.position.z < macrocfg.park_zmin|int %}
            G0 Z{macrocfg.park_zmin|int - printer.toolhead.position.z|int}
        {% else %}
            G0 Z{park_z|int}
        {% endif %}
    {% endif %}
    G90                                                         # Absolute positioning


[gcode_macro _VALIDATE_TEMPERATURE]
description: Centralized temperature validation for operations
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set TARGET = params.TARGET|default(0)|float %}
    {% set MIN_TEMP = params.MIN_TEMP|default(macrocfg.min_extrude_temp)|float %}
    {% set OPERATION = params.OPERATION|default('operation')|string %}
    
    {% set current_temp = printer.extruder.temperature|float %}
    {% set current_target = printer.extruder.target|int %}
    
    {% if TARGET < MIN_TEMP and current_target < MIN_TEMP %}
        RESPOND MSG="❌ Temperature too low for {OPERATION}: {TARGET}°C (min: {MIN_TEMP}°C)"
        _HANDLE_ERROR ERROR="Temperature validation failed for {OPERATION}"
    {% elif current_temp < (TARGET - macrocfg.temp_tolerance) %}
        RESPOND MSG="🔥 Heating for {OPERATION}: {TARGET}°C"
        _SET_LED_STATUS STATUS=heating
        M109 S{TARGET}
        _SET_LED_STATUS STATUS=standby
    {% endif %}


[gcode_macro _HANDLE_ERROR]
description: Centralized error handling and reporting
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% set ERROR = params.ERROR|default('Unknown error')|string %}
    
    RESPOND MSG="❌ ERROR: {ERROR}"
    
    _SET_LED_STATUS STATUS=error
    
    {% if macrocfg.audio_status == True %}
        {macrocfg.error_audio}
    {% endif %}


[gcode_macro _ALERT_BEEP_ON]
description: Enable alert beeping for user attention
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% if macrocfg.audio_status == True %}
        # Implementation would depend on specific beeper hardware
        RESPOND MSG="🔊 Alert beeping enabled"
    {% endif %}


[gcode_macro _ALERT_BEEP_OFF]
description: Disable alert beeping
gcode:
    {% set macrocfg = printer['gcode_macro _macroVariables'] %}
    {% if macrocfg.audio_status == True %}
        # Implementation would depend on specific beeper hardware
        RESPOND MSG="🔇 Alert beeping disabled"
    {% endif %}
    